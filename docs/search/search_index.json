{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Human-GEM User Guide Note UNDER DEVELOPMENT Overview This guide contains instructions and examples of how to use Human-GEM. Installation Getting started Flux balance analysis GEM extraction using tINIT GEM comparison Citation J. L. Robinson, et al. An atlas of human metabolism. Sci. Signal. 13, eaaz1482 (2020). doi:10.1126/scisignal.aaz1482","title":"Overview"},{"location":"#human-gem-user-guide","text":"Note UNDER DEVELOPMENT","title":"Human-GEM User Guide"},{"location":"#overview","text":"This guide contains instructions and examples of how to use Human-GEM. Installation Getting started Flux balance analysis GEM extraction using tINIT GEM comparison","title":"Overview"},{"location":"#citation","text":"J. L. Robinson, et al. An atlas of human metabolism. Sci. Signal. 13, eaaz1482 (2020). doi:10.1126/scisignal.aaz1482","title":"Citation"},{"location":"flux_balance_analysis/","text":"Flux Balance Analysis One of the most common analysis methods for GEMs is flux balance analysis (FBA). This page will briefly walk through the basics of using FBA with Human-GEM. Important You must have a linear optimization solver (e.g., Gurobi) installed and accessible by MATLAB to run FBA. See the installation page of this guide or the RAVEN instructions for details on setting up a solver. Model preparation The Human-GEM model is provided in a format containing \"boundary\" metabolites (in the x compartment). Boundary metabolites are used to balance reactions that exchange mass between the extracellular compartment ( s ) and the system boundary. For example, take a look at the glucose exchange reaction: constructEquations(ihuman, 'HMR_9034') % ans = % % 1\u00d71 cell array % % {'glucose[s] <=> glucose[x]'} However, this effectively closes all exchange reactions when running FBA. Therefore, the boundary metabolites need to be removed before using FBA. model = simplifyModel(ihuman); Now all boundary metabolites are removed, enabling exchange to/from the system. constructEquations(model, 'HMR_9034') % ans = % % 1\u00d71 cell array % % {'glucose[s] <=> '} Run FBA By default, the model objective (defined by the .c model field) is set to maximize flux through the biomass_human reaction, and all exchange reactions are open. model.rxns(model.c == 1) % ans = % % 1\u00d71 cell array % % {'biomass_human'} Run FBA using the RAVEN solveLP function. sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -187.3536 % stat: 1 % msg: 'Optimal solution found' The sol.f field contains the (negative) value of the objective, and the sol.x vector contains the flux value for each reaction. Important As mentioned, all the exchange reactions are fully opened (upper and lower bounds set to 1000 and -1000, respectively). Therefore, the value of the biomass flux here is meaningless (except that it is nonzero), and its units are undefined. Additional constraints, such as those defining the flux bounds of exchange reactions, are necessary to define a feasible solution space. An FBA example Calculation of ATP yield To illustrate an example of a more meaningful flux solution, we can use FBA to calculate ATP yield (more specifically, the amount of ADP phosphorylated) per glucose consumed. ATP yield can be quantified by the amount of flux through the ATP hydrolysis reaction HMR_3964 . constructEquations(model, 'HMR_3964') % ans = % % 1\u00d71 cell array % % {'ATP[c] + H2O[c] => ADP[c] + H+[c] + Pi[c]'} Change the objective to maximize flux through the ATP hydrolysis reaction: model = setParam(model, 'obj', 'HMR_3964', 1); Prevent import of all metabolites except glucose, for which the max import flux is set to 1 (mmol/gDW/h): model = setExchangeBounds(model, 'glucose', -1); % negative flux indicates import Note The setExchangeBounds function will by default allow unrestricted production of all metabolites, but will prevent consumption of any metabolites not specified in the input argument. Now perform FBA to determine the maximum amount of ATP hydrolyzed (ADP phosphorylated) per equivalent of glucose consumed. sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -2.0000 % stat: 1 % msg: 'Optimal solution found' As expected, the theoretical mol ADP phosphorylated per mol glucose consumed is 2. Note that we have not allowed the import of oxygen, so this is under anaerobic conditions. This is of course purely theoretical given that most humans produce very little of anything when deprived of oxygen. Let us now calculate the same ATP yield, but in the present of oxygen. We first need to update the exchange constraints: model = setExchangeBounds(model, {'glucose', 'O2'}, [-1, -1000]); Note that we are allowing effectively infinite oxygen consumption, since we are interested in non-O2-limited ATP yield per glucose. Now re-run the FBA to see how the maximum yield has changed: sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -31.5000 % stat: 1 % msg: 'Optimal solution found' We now see a much higher ATP yield per glucose consumed of 31.5.","title":"Flux balance analysis"},{"location":"flux_balance_analysis/#flux-balance-analysis","text":"One of the most common analysis methods for GEMs is flux balance analysis (FBA). This page will briefly walk through the basics of using FBA with Human-GEM. Important You must have a linear optimization solver (e.g., Gurobi) installed and accessible by MATLAB to run FBA. See the installation page of this guide or the RAVEN instructions for details on setting up a solver.","title":"Flux Balance Analysis"},{"location":"flux_balance_analysis/#model-preparation","text":"The Human-GEM model is provided in a format containing \"boundary\" metabolites (in the x compartment). Boundary metabolites are used to balance reactions that exchange mass between the extracellular compartment ( s ) and the system boundary. For example, take a look at the glucose exchange reaction: constructEquations(ihuman, 'HMR_9034') % ans = % % 1\u00d71 cell array % % {'glucose[s] <=> glucose[x]'} However, this effectively closes all exchange reactions when running FBA. Therefore, the boundary metabolites need to be removed before using FBA. model = simplifyModel(ihuman); Now all boundary metabolites are removed, enabling exchange to/from the system. constructEquations(model, 'HMR_9034') % ans = % % 1\u00d71 cell array % % {'glucose[s] <=> '}","title":"Model preparation"},{"location":"flux_balance_analysis/#run-fba","text":"By default, the model objective (defined by the .c model field) is set to maximize flux through the biomass_human reaction, and all exchange reactions are open. model.rxns(model.c == 1) % ans = % % 1\u00d71 cell array % % {'biomass_human'} Run FBA using the RAVEN solveLP function. sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -187.3536 % stat: 1 % msg: 'Optimal solution found' The sol.f field contains the (negative) value of the objective, and the sol.x vector contains the flux value for each reaction. Important As mentioned, all the exchange reactions are fully opened (upper and lower bounds set to 1000 and -1000, respectively). Therefore, the value of the biomass flux here is meaningless (except that it is nonzero), and its units are undefined. Additional constraints, such as those defining the flux bounds of exchange reactions, are necessary to define a feasible solution space.","title":"Run FBA"},{"location":"flux_balance_analysis/#an-fba-example","text":"","title":"An FBA example"},{"location":"flux_balance_analysis/#calculation-of-atp-yield","text":"To illustrate an example of a more meaningful flux solution, we can use FBA to calculate ATP yield (more specifically, the amount of ADP phosphorylated) per glucose consumed. ATP yield can be quantified by the amount of flux through the ATP hydrolysis reaction HMR_3964 . constructEquations(model, 'HMR_3964') % ans = % % 1\u00d71 cell array % % {'ATP[c] + H2O[c] => ADP[c] + H+[c] + Pi[c]'} Change the objective to maximize flux through the ATP hydrolysis reaction: model = setParam(model, 'obj', 'HMR_3964', 1); Prevent import of all metabolites except glucose, for which the max import flux is set to 1 (mmol/gDW/h): model = setExchangeBounds(model, 'glucose', -1); % negative flux indicates import Note The setExchangeBounds function will by default allow unrestricted production of all metabolites, but will prevent consumption of any metabolites not specified in the input argument. Now perform FBA to determine the maximum amount of ATP hydrolyzed (ADP phosphorylated) per equivalent of glucose consumed. sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -2.0000 % stat: 1 % msg: 'Optimal solution found' As expected, the theoretical mol ADP phosphorylated per mol glucose consumed is 2. Note that we have not allowed the import of oxygen, so this is under anaerobic conditions. This is of course purely theoretical given that most humans produce very little of anything when deprived of oxygen. Let us now calculate the same ATP yield, but in the present of oxygen. We first need to update the exchange constraints: model = setExchangeBounds(model, {'glucose', 'O2'}, [-1, -1000]); Note that we are allowing effectively infinite oxygen consumption, since we are interested in non-O2-limited ATP yield per glucose. Now re-run the FBA to see how the maximum yield has changed: sol = solveLP(model) % sol = % % struct with fields: % % x: [13417\u00d71 double] % f: -31.5000 % stat: 1 % msg: 'Optimal solution found' We now see a much higher ATP yield per glucose consumed of 31.5.","title":"Calculation of ATP yield"},{"location":"gem_comparison/","text":"GEM Comparison Coming soon ...","title":"GEM comparison"},{"location":"gem_comparison/#gem-comparison","text":"Coming soon ...","title":"GEM Comparison"},{"location":"gem_extraction/","text":"GEM Extraction Human-GEM is a generic model of human metabolism, meaning that it contains metabolic reactions known to occur in any human cell. The model is therefore not representative of any one tissue or cell type, in which only a subset of the reactions would be active. A common approach is to extract the subset of the GEM that is likely to be active in the tissue or cell type of interest, based on a corresponding dataset (e.g., transcriptomics, proteomics, metabolomics, etc.). This approach is often referred to as GEM extraction or contextualization , where the generated model is termed the extracted or contextualized / context-specific GEM . Task\u2010driven Integrative Network Inference for Tissues (tINIT) Although many GEM extraction methods exist, this guide will cover the tINIT algorithm. For more details on the algorithm itself, see the following papers: Agren et al. (2012) PLoS Comput Biol - Initial development of INIT Agren et al. (2014) Mol Syst Biol - Incorporation of metabolic tasks (tINIT) Robinson et al. (2020) Sci Signal - Recognition of enzyme complexes The original (2014) tINIT algorithm is implemented in the RAVEN Toolbox, where its main calling function is getINITModel . This guide will cover the updated (2020) version of tINIT that is maintained on the Human-GEM repository, called using the getINITModel2 function. Example: Extract a liver GEM To demonstrate the use of tINIT, we will walk through an example that replicates part of the Human-GEM publication . The data used in this example can be retrieved from the Zenodo repository associated with the publication. Download the Zenodo repository .zip file, and extract. Prepare the transcriptomic data Data from the condition, tissue, or cell type for which the GEM will be generated is necessary to determine which reactions from the reference model (Human-GEM) should be included. In this case, we are using RNA-Seq data (TPM normalized) that was originally obtained from the GTEx database . In MATLAB, load the gtex_median_tissue_tpm.txt file from the Zenodo repository tINIT_GEMs/data/ subdirectory. % replace 'my/path/' with the path on your system, or change to the directory with the file gtex_data = readtable('my/path/tINIT_GEMs/data/gtex_median_tissue_tpm.txt'); % take a look at the first few rows and columns of the table gtex_data(1:5,1:5) % ans = % % 5\u00d75 table % % genes adipose_tissue adrenal_gland blood_vessel bladder % ___________________ ______________ _____________ ____________ _______ % % {'ENSG00000223972'} 0.05458 0.0746 0.04535 0.05878 % {'ENSG00000227232'} 11.2 8.023 11.99 14.24 % {'ENSG00000243485'} 0.06012 0.08179 0.05278 0.06097 % {'ENSG00000237613'} 0.03653 0.0405 0.03668 0.04113 % {'ENSG00000268020'} 0.02565 0.03479 0 0 Extract information from the table into a structure called data_struct % extract the tissue and gene names data_struct.tissues = gtex_data.Properties.VariableNames(2:end)'; % sample (tissue) names data_struct.genes = gtex_data.genes; % gene names data_struct.levels = table2array(gtex_data(:, 2:end)); % gene TPM values Important The name of the data structure ( data_struct in this example) is not important. However, its fields ( genes , tissues , levels ) should not be changed. Note We don't actually need all of the data for this example since we are only generating a model for one tissue (liver). One could instead extract only the liver column into the levels field, and included only liver in the tissues field. Although the original tINIT implementation always compared gene expression in the tissue of interest to the average of all other provided tissues, the updated version enables the option to instead compare the expression to a threshold value. Here, we will use this alternative approach with a threshold value of 1 TPM. data_struct.threshold = 1; Note Exclude the threshold field from the data structure to use the original tINIT approach of comparing the gene expression in your tissue of interest with all other tissues. If you choose this approach, however, you must include the gene expression data from the other tissues so that the algorithm has something to compare to. Take a look at data_struct to make sure all the fields are present and have the expected dimensions data_struct % data_struct = % % struct with fields: % % tissues: {30\u00d71 cell} % genes: {56202\u00d71 cell} % levels: [56202\u00d730 double] % threshold: 1 Load the reference GEM The reference GEM from which the liver-specific model will be extracted is Human-GEM. Load the model from the HumanGEM.mat file in the Human-GEM repository load('HumanGEM.mat'); % loads model as a structure named \"ihuman\" Important The tINIT algorithm requires that the model is provided in \"closed form\"; i.e., it contains boundary metabolites. Therefore, the boundary metabolites should not be removed by e.g., the simplifyModel function before use with tINIT. At the same time, the exchange reactions should all be unbounded (lower and upper bounds of -1000 and 1000, respectively). Human-GEM is already provided in a format that satisfies both of these requirements, so no additional changes are needed. Prepare the metabolic task list The tINIT algorithm has the option to specify one or more metabolic tasks that the extracted model should be able to perform, such as transport of essential amino acids or production of biomass. Although task specification is not required, it is generally recommended to obtain a more functional extracted GEM, especially if it is going to be used in simulation-based analysis (e.g., FBA). Following with the procedure used in the Human-GEM manuscript, this example will use the list of 57 \"essential\" metabolic tasks that all cells are expected to be able to perform to be viable. Load the metabolicTasks_Essential.xlsx list of metabolic tasks from the data/metabolicTasks/ subdirectory of the Human-GEM repository using the RAVEN parseTaskList function. essentialTasks = parseTaskList('/my/path/Human-GEM/data/metabolicTasks/metabolicTasks_Essential.xlsx') % essentialTasks = % % 57\u00d71 struct array with fields: % % id % description % shouldFail % printFluxes % comments % inputs % LBin % UBin % outputs % LBout % UBout % equations % LBequ % UBequ % changed % LBrxn % UBrxn It is important to first verify that the reference model (Human-GEM) can successfully perform all of the tasks. If the reference model cannot perform a task, then neither can any GEM extracted from that model. Verify that the reference model passes all of the essential metabolic tasks. % see what the other inputs mean by typing \"help checkTasks\" checkTasks(ihuman, [], true, false, false, essentialTasks); % PASS: [ER] Aerobic rephosphorylation of ATP from glucose % PASS: [ER] Aerobic rephosphorylation of GTP % PASS: [ER] Aerobic rephosphorylation of CTP % PASS: [ER] Aerobic rephosphorylation of UTP % PASS: [BS] ATP de novo synthesis % PASS: [BS] CTP de novo synthesis % PASS: [BS] GTP de novo synthesis % PASS: [BS] UTP de novo synthesis % PASS: [BS] dATP de novo synthesis % ... Run tINIT Now all inputs are ready to run tINIT and extract a GEM specific to the liver tissue based on its corresponding RNA expression profile. Although it's not necessary to re-assign the input variables before calling the getINITModel2 function, we do it here to make the inputs very clear. Use the help getINITModel2 command to see more details on the function inputs and outputs. refModel = ihuman; % the reference model from which the GEM will be extracted tissue = 'liver'; % must match the tissue name in data_struct.tissues celltype = []; % used if tissues are subdivided into cell type, which is not the case here hpaData = []; % data structure containing protein abundance information (not used here) arrayData = data_struct; % data structure with gene (RNA) abundance information metabolomicsData = []; % list of metabolite names if metabolomic data is available removeGenes = true; % (default) remove lowly/non-expressed genes from the extracted GEM taskFile = []; % we already loaded the task file, so this input is not required useScoresForTasks = true; % (default) use expression data to decide which reactions to keep printReport = true; % (default) print status/completion report to screen taskStructure = essentialTasks; % metabolic task structure (used instead \"taskFile\") params = []; % additional optimization parameters for the INIT algorithm paramsFT = []; % additional optimization parameters for the fit-tasks algorithm Run the getINITModel2 function to extract the GEM liverGEM = getINITModel2(refModel, tissue, celltype, hpaData, arrayData, metabolomicsData, removeGenes, taskFile, useScoresForTasks, printReport, taskStructure, params, paramsFT); % ***Generating model for: liver % -Using array data % -Using metabolic tasks % % Reference model statistics: % 13417 reactions, 3625 genes % Mean reaction score: 4.1017 % Mean gene score: 5.3912 % Reactions with positive scores: 54.2372% % % Pruned model statistics: % 11903 reactions, 3052 genes % Mean reaction score: 4.1094 % Mean gene score: 5.1854 % Reactions with positive scores: 54.1964% % % Reactions essential for tasks: % 403 reactions, 365 genes % Mean reaction score: 8.3307 % Mean gene score: 7.1855 % Reactions with positive scores: 87.8412% MILP detected. Academic license - for non-commercial use only Gurobi Optimizer version 9.0.1 build v9.0.1rc0 (mac64) Optimize a model with 25830 rows, 60561 columns and 126189 nonzeros ... Warning This algorithm will take a while to run (30 min to 1 hr). It is therefore recommended that this is run on a compute cluster, especially when repeating for many different GEMs. Warning Unfortunately, there is currently a bug in how RAVEN processes the optimization parameters passed by the params and paramsFT arguments when using the Gurobi solver. Therefore, optimization parameters (such as time limit) need to be changed manually within the RAVEN optimizeProb function. Note In this example, we called getINITModel2 with one output, liverGEM . Use help getINITModel2 to see a description of the other optional outputs. Once the optimization is complete, we can take a look at the extracted GEM. liverGEM % liverGEM = % % struct with fields: % % id: 'INITModel' % description: 'Automatically generated model for liver' % rxns: {7971\u00d71 cell} % mets: {6744\u00d71 cell} % S: [6744\u00d77971 double] % lb: [7971\u00d71 double] % ub: [7971\u00d71 double] % rev: [7971\u00d71 double] % c: [7971\u00d71 double] % b: [6744\u00d72 double] % comps: {10\u00d71 cell} % compNames: {10\u00d71 cell} % rxnNames: {7971\u00d71 cell} % grRules: {7971\u00d71 cell} % rxnGeneMat: [7971\u00d72305 double] % subSystems: {7971\u00d71 cell} % eccodes: {7971\u00d71 cell} % genes: {2305\u00d71 cell} % metNames: {6744\u00d71 cell} % metComps: [6744\u00d71 double] % inchis: {6744\u00d71 cell} % metFormulas: {6744\u00d71 cell} % unconstrained: [6744\u00d71 double] % rxnReferences: {7971\u00d71 cell} % rxnFrom: {7971\u00d71 cell} % metFrom: {6744\u00d71 cell} % rxnConfidenceScores: [7971\u00d71 double] % metCharges: [6744\u00d71 int64] % version: '1.3.1' % annotation: [1\u00d71 struct] % geneFrom: {2305\u00d71 cell} Notice that the model has fewer reactions, metabolites, and genes compared to the reference model. numel(ihuman.rxns) - numel(liverGEM.rxns) % ans = % % 5446 numel(ihuman.mets) - numel(liverGEM.mets) % ans = % % 3394 numel(ihuman.genes) - numel(liverGEM.genes) % ans = % % 1320 It is also good to verify that the extracted GEM can also perform the required metabolic tasks. checkTasks(liverGEM, [], true, false, false, essentialTasks);","title":"GEM extraction using tINIT"},{"location":"gem_extraction/#gem-extraction","text":"Human-GEM is a generic model of human metabolism, meaning that it contains metabolic reactions known to occur in any human cell. The model is therefore not representative of any one tissue or cell type, in which only a subset of the reactions would be active. A common approach is to extract the subset of the GEM that is likely to be active in the tissue or cell type of interest, based on a corresponding dataset (e.g., transcriptomics, proteomics, metabolomics, etc.). This approach is often referred to as GEM extraction or contextualization , where the generated model is termed the extracted or contextualized / context-specific GEM .","title":"GEM Extraction"},{"location":"gem_extraction/#taskdriven-integrative-network-inference-for-tissues-tinit","text":"Although many GEM extraction methods exist, this guide will cover the tINIT algorithm. For more details on the algorithm itself, see the following papers: Agren et al. (2012) PLoS Comput Biol - Initial development of INIT Agren et al. (2014) Mol Syst Biol - Incorporation of metabolic tasks (tINIT) Robinson et al. (2020) Sci Signal - Recognition of enzyme complexes The original (2014) tINIT algorithm is implemented in the RAVEN Toolbox, where its main calling function is getINITModel . This guide will cover the updated (2020) version of tINIT that is maintained on the Human-GEM repository, called using the getINITModel2 function.","title":"Task\u2010driven Integrative Network Inference for Tissues (tINIT)"},{"location":"gem_extraction/#example-extract-a-liver-gem","text":"To demonstrate the use of tINIT, we will walk through an example that replicates part of the Human-GEM publication . The data used in this example can be retrieved from the Zenodo repository associated with the publication. Download the Zenodo repository .zip file, and extract.","title":"Example: Extract a liver GEM"},{"location":"gem_extraction/#prepare-the-transcriptomic-data","text":"Data from the condition, tissue, or cell type for which the GEM will be generated is necessary to determine which reactions from the reference model (Human-GEM) should be included. In this case, we are using RNA-Seq data (TPM normalized) that was originally obtained from the GTEx database . In MATLAB, load the gtex_median_tissue_tpm.txt file from the Zenodo repository tINIT_GEMs/data/ subdirectory. % replace 'my/path/' with the path on your system, or change to the directory with the file gtex_data = readtable('my/path/tINIT_GEMs/data/gtex_median_tissue_tpm.txt'); % take a look at the first few rows and columns of the table gtex_data(1:5,1:5) % ans = % % 5\u00d75 table % % genes adipose_tissue adrenal_gland blood_vessel bladder % ___________________ ______________ _____________ ____________ _______ % % {'ENSG00000223972'} 0.05458 0.0746 0.04535 0.05878 % {'ENSG00000227232'} 11.2 8.023 11.99 14.24 % {'ENSG00000243485'} 0.06012 0.08179 0.05278 0.06097 % {'ENSG00000237613'} 0.03653 0.0405 0.03668 0.04113 % {'ENSG00000268020'} 0.02565 0.03479 0 0 Extract information from the table into a structure called data_struct % extract the tissue and gene names data_struct.tissues = gtex_data.Properties.VariableNames(2:end)'; % sample (tissue) names data_struct.genes = gtex_data.genes; % gene names data_struct.levels = table2array(gtex_data(:, 2:end)); % gene TPM values Important The name of the data structure ( data_struct in this example) is not important. However, its fields ( genes , tissues , levels ) should not be changed. Note We don't actually need all of the data for this example since we are only generating a model for one tissue (liver). One could instead extract only the liver column into the levels field, and included only liver in the tissues field. Although the original tINIT implementation always compared gene expression in the tissue of interest to the average of all other provided tissues, the updated version enables the option to instead compare the expression to a threshold value. Here, we will use this alternative approach with a threshold value of 1 TPM. data_struct.threshold = 1; Note Exclude the threshold field from the data structure to use the original tINIT approach of comparing the gene expression in your tissue of interest with all other tissues. If you choose this approach, however, you must include the gene expression data from the other tissues so that the algorithm has something to compare to. Take a look at data_struct to make sure all the fields are present and have the expected dimensions data_struct % data_struct = % % struct with fields: % % tissues: {30\u00d71 cell} % genes: {56202\u00d71 cell} % levels: [56202\u00d730 double] % threshold: 1","title":"Prepare the transcriptomic data"},{"location":"gem_extraction/#load-the-reference-gem","text":"The reference GEM from which the liver-specific model will be extracted is Human-GEM. Load the model from the HumanGEM.mat file in the Human-GEM repository load('HumanGEM.mat'); % loads model as a structure named \"ihuman\" Important The tINIT algorithm requires that the model is provided in \"closed form\"; i.e., it contains boundary metabolites. Therefore, the boundary metabolites should not be removed by e.g., the simplifyModel function before use with tINIT. At the same time, the exchange reactions should all be unbounded (lower and upper bounds of -1000 and 1000, respectively). Human-GEM is already provided in a format that satisfies both of these requirements, so no additional changes are needed.","title":"Load the reference GEM"},{"location":"gem_extraction/#prepare-the-metabolic-task-list","text":"The tINIT algorithm has the option to specify one or more metabolic tasks that the extracted model should be able to perform, such as transport of essential amino acids or production of biomass. Although task specification is not required, it is generally recommended to obtain a more functional extracted GEM, especially if it is going to be used in simulation-based analysis (e.g., FBA). Following with the procedure used in the Human-GEM manuscript, this example will use the list of 57 \"essential\" metabolic tasks that all cells are expected to be able to perform to be viable. Load the metabolicTasks_Essential.xlsx list of metabolic tasks from the data/metabolicTasks/ subdirectory of the Human-GEM repository using the RAVEN parseTaskList function. essentialTasks = parseTaskList('/my/path/Human-GEM/data/metabolicTasks/metabolicTasks_Essential.xlsx') % essentialTasks = % % 57\u00d71 struct array with fields: % % id % description % shouldFail % printFluxes % comments % inputs % LBin % UBin % outputs % LBout % UBout % equations % LBequ % UBequ % changed % LBrxn % UBrxn It is important to first verify that the reference model (Human-GEM) can successfully perform all of the tasks. If the reference model cannot perform a task, then neither can any GEM extracted from that model. Verify that the reference model passes all of the essential metabolic tasks. % see what the other inputs mean by typing \"help checkTasks\" checkTasks(ihuman, [], true, false, false, essentialTasks); % PASS: [ER] Aerobic rephosphorylation of ATP from glucose % PASS: [ER] Aerobic rephosphorylation of GTP % PASS: [ER] Aerobic rephosphorylation of CTP % PASS: [ER] Aerobic rephosphorylation of UTP % PASS: [BS] ATP de novo synthesis % PASS: [BS] CTP de novo synthesis % PASS: [BS] GTP de novo synthesis % PASS: [BS] UTP de novo synthesis % PASS: [BS] dATP de novo synthesis % ...","title":"Prepare the metabolic task list"},{"location":"gem_extraction/#run-tinit","text":"Now all inputs are ready to run tINIT and extract a GEM specific to the liver tissue based on its corresponding RNA expression profile. Although it's not necessary to re-assign the input variables before calling the getINITModel2 function, we do it here to make the inputs very clear. Use the help getINITModel2 command to see more details on the function inputs and outputs. refModel = ihuman; % the reference model from which the GEM will be extracted tissue = 'liver'; % must match the tissue name in data_struct.tissues celltype = []; % used if tissues are subdivided into cell type, which is not the case here hpaData = []; % data structure containing protein abundance information (not used here) arrayData = data_struct; % data structure with gene (RNA) abundance information metabolomicsData = []; % list of metabolite names if metabolomic data is available removeGenes = true; % (default) remove lowly/non-expressed genes from the extracted GEM taskFile = []; % we already loaded the task file, so this input is not required useScoresForTasks = true; % (default) use expression data to decide which reactions to keep printReport = true; % (default) print status/completion report to screen taskStructure = essentialTasks; % metabolic task structure (used instead \"taskFile\") params = []; % additional optimization parameters for the INIT algorithm paramsFT = []; % additional optimization parameters for the fit-tasks algorithm Run the getINITModel2 function to extract the GEM liverGEM = getINITModel2(refModel, tissue, celltype, hpaData, arrayData, metabolomicsData, removeGenes, taskFile, useScoresForTasks, printReport, taskStructure, params, paramsFT); % ***Generating model for: liver % -Using array data % -Using metabolic tasks % % Reference model statistics: % 13417 reactions, 3625 genes % Mean reaction score: 4.1017 % Mean gene score: 5.3912 % Reactions with positive scores: 54.2372% % % Pruned model statistics: % 11903 reactions, 3052 genes % Mean reaction score: 4.1094 % Mean gene score: 5.1854 % Reactions with positive scores: 54.1964% % % Reactions essential for tasks: % 403 reactions, 365 genes % Mean reaction score: 8.3307 % Mean gene score: 7.1855 % Reactions with positive scores: 87.8412% MILP detected. Academic license - for non-commercial use only Gurobi Optimizer version 9.0.1 build v9.0.1rc0 (mac64) Optimize a model with 25830 rows, 60561 columns and 126189 nonzeros ... Warning This algorithm will take a while to run (30 min to 1 hr). It is therefore recommended that this is run on a compute cluster, especially when repeating for many different GEMs. Warning Unfortunately, there is currently a bug in how RAVEN processes the optimization parameters passed by the params and paramsFT arguments when using the Gurobi solver. Therefore, optimization parameters (such as time limit) need to be changed manually within the RAVEN optimizeProb function. Note In this example, we called getINITModel2 with one output, liverGEM . Use help getINITModel2 to see a description of the other optional outputs. Once the optimization is complete, we can take a look at the extracted GEM. liverGEM % liverGEM = % % struct with fields: % % id: 'INITModel' % description: 'Automatically generated model for liver' % rxns: {7971\u00d71 cell} % mets: {6744\u00d71 cell} % S: [6744\u00d77971 double] % lb: [7971\u00d71 double] % ub: [7971\u00d71 double] % rev: [7971\u00d71 double] % c: [7971\u00d71 double] % b: [6744\u00d72 double] % comps: {10\u00d71 cell} % compNames: {10\u00d71 cell} % rxnNames: {7971\u00d71 cell} % grRules: {7971\u00d71 cell} % rxnGeneMat: [7971\u00d72305 double] % subSystems: {7971\u00d71 cell} % eccodes: {7971\u00d71 cell} % genes: {2305\u00d71 cell} % metNames: {6744\u00d71 cell} % metComps: [6744\u00d71 double] % inchis: {6744\u00d71 cell} % metFormulas: {6744\u00d71 cell} % unconstrained: [6744\u00d71 double] % rxnReferences: {7971\u00d71 cell} % rxnFrom: {7971\u00d71 cell} % metFrom: {6744\u00d71 cell} % rxnConfidenceScores: [7971\u00d71 double] % metCharges: [6744\u00d71 int64] % version: '1.3.1' % annotation: [1\u00d71 struct] % geneFrom: {2305\u00d71 cell} Notice that the model has fewer reactions, metabolites, and genes compared to the reference model. numel(ihuman.rxns) - numel(liverGEM.rxns) % ans = % % 5446 numel(ihuman.mets) - numel(liverGEM.mets) % ans = % % 3394 numel(ihuman.genes) - numel(liverGEM.genes) % ans = % % 1320 It is also good to verify that the extracted GEM can also perform the required metabolic tasks. checkTasks(liverGEM, [], true, false, false, essentialTasks);","title":"Run tINIT"},{"location":"getting_started/","text":"Getting Started Make sure you have completed the installation process before continuing. The commands described on this page are all run from the MATLAB command prompt, unless otherwise noted. Loading Human-GEM into MATLAB Important The Human-GEM model files are provided in a RAVEN-friendly format . If you intend on using COBRA , see the Using Human-GEM with COBRA section below. Note All the model file formats described below are on the master branch of the Human-GEM repository. Note that only the .yml version is available on branches other than master (e.g., devel ), to facilitate tracking of model changes. From the HumanGEM.mat file (recommended) The quickest and easiest way to load the Human-GEM model is from the .mat file. load('HumanGEM.mat'); This will load the model as a structure named ihuman . ihuman % ihuman = % % struct with fields: % % id: 'Human-GEM' % description: 'Generic genome-scale metabolic model of Homo sapiens' % rxns: {13417\u00d71 cell} % mets: {10138\u00d71 cell} % S: [10138\u00d713417 double] % lb: [13417\u00d71 double] % ub: [13417\u00d71 double] % rev: [13417\u00d71 double] % c: [13417\u00d71 double] % b: [10138\u00d71 double] % comps: {10\u00d71 cell} % compNames: {10\u00d71 cell} % rxnNames: {13417\u00d71 cell} % grRules: {13417\u00d71 cell} % rxnGeneMat: [13417\u00d73625 double] % subSystems: {13417\u00d71 cell} % eccodes: {13417\u00d71 cell} % genes: {3625\u00d71 cell} % metNames: {10138\u00d71 cell} % metComps: [10138\u00d71 double] % inchis: {10138\u00d71 cell} % metFormulas: {10138\u00d71 cell} % unconstrained: [10138\u00d71 double] % rxnReferences: {13417\u00d71 cell} % rxnFrom: {13417\u00d71 cell} % metFrom: {10138\u00d71 cell} % rxnConfidenceScores: [13417\u00d71 double] % metCharges: [10138\u00d71 int64] % version: '1.3.1' % annotation: [1\u00d71 struct] From the HumanGEM.yml file (recommended if not on master branch) The yaml version of Human-GEM is loaded using the importHumanYaml function. ihuman = importHumanYaml('HumanGEM.yml'); % Start importing... % metaData % metabolites % reactions % genes % compartments % % importing completed % follow-up processing... Done! From the HumanGEM.xml (SBML) file The .xml (SBML) version of Human-GEM is loaded using the RAVEN importHumanYaml function. ihuman = importModel(which('HumanGEM.xml')); % The model contains 0 errors and 1 warnings. % % WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): % HMR_7161 % HMR_7162 % ATPasel Note The warning regarding the grRules can be ignored. Some packages are a bit more strict in their gene-reaction rule formulation, but Human-GEM functions have no such restrictions. Note We include the which() command around the model filename to provide its full path because some functions cannot otherwise find the file. This is not necessary if the model file is in MATLAB's current working directory (i.e., if you can see the model file in the Current Folder window). From the HumanGEM.xlsx file The .xslx (Excel) version of Human-GEM is loaded using the RAVEN importExcelModel function. ihuman = importExcelModel(which('HumanGEM.xlsx')); % WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): % HMR_7161 % HMR_7162 % ATPasel % % WARNING: The following InChI strings are associated to more than one unique metabolite name: % 1S/C27H46O2/c1-18(2)7-6-14-27(5,29)24-11-10-22-21-9-8-19-17-20(28)12-15-25(19,3)23(21)13-16-26(22,24)4/h8,18,20-24,28-29H,6-7,9-17H2,1-5H3/t20-,21-,22-,23-,24-,25-,26-,27-/m0/s1 % 1S/C42H58NO/c1-32(20-22-39-35(4)17-12-25-41(39,6)7)14-10-16-34(3)30-38-31-37(24-27-43(38)28-29-44)19-11-15-33(2)21-23-40-36(5)18-13-26-42(40,8)9/h10-11,14-16,19-24,27,30-31,44H,12-13,17-18,25-26,28-29H2,1-9H3/q+1 Important By default, importExcelModel will remove the boundary metabolites (those in the x compartment) from the model. To prevent removal of the boundary metabolites, specify false in the second argument: importExcelModel('HumanGEM.xlsx', false) . From the HumanGEM.txt file There is no function to import the .txt version of the model. The HumanGEM.txt file is supplied for those who need or prefer a more human-readable plain-text format, but is not intended for loading into MATLAB. Using Human-GEM with COBRA Using the provided Human-GEM models directly with COBRA is likely to cause errors or unexpected behavior. Therefore, the model should first be converted to a COBRA-friendly format before using the COBRA Toolbox. 1. Load the model into MATLAB Use one of the methods described above to load Human-GEM into MATLAB. load('HumanGEM.mat'); % loads model as structure named \"ihuman\" 2. Convert the model into COBRA format Use the RAVEN ravenCobraWrapper function to convert the model into a COBRA-friendly format. model = ravenCobraWrapper(ihuman); % Converting RAVEN structure to COBRA.. The resulting model output should now be ready for use with the COBRA Toolbox. Alternative approach (not recommended) Another option is to load the SBML model HumanGEM.xml directly into COBRA format using the COBRA readCbModel function. model = readCbModel(which('HumanGEM.xml')); % The model contains 0 errors and 1 warnings. Warning Since the SBML file is not formatted for COBRA, the resulting model may be missing content or exhibit unexpected behavior. Proceed with caution.","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Make sure you have completed the installation process before continuing. The commands described on this page are all run from the MATLAB command prompt, unless otherwise noted.","title":"Getting Started"},{"location":"getting_started/#loading-human-gem-into-matlab","text":"Important The Human-GEM model files are provided in a RAVEN-friendly format . If you intend on using COBRA , see the Using Human-GEM with COBRA section below. Note All the model file formats described below are on the master branch of the Human-GEM repository. Note that only the .yml version is available on branches other than master (e.g., devel ), to facilitate tracking of model changes.","title":"Loading Human-GEM into MATLAB"},{"location":"getting_started/#from-the-humangemmat-file-recommended","text":"The quickest and easiest way to load the Human-GEM model is from the .mat file. load('HumanGEM.mat'); This will load the model as a structure named ihuman . ihuman % ihuman = % % struct with fields: % % id: 'Human-GEM' % description: 'Generic genome-scale metabolic model of Homo sapiens' % rxns: {13417\u00d71 cell} % mets: {10138\u00d71 cell} % S: [10138\u00d713417 double] % lb: [13417\u00d71 double] % ub: [13417\u00d71 double] % rev: [13417\u00d71 double] % c: [13417\u00d71 double] % b: [10138\u00d71 double] % comps: {10\u00d71 cell} % compNames: {10\u00d71 cell} % rxnNames: {13417\u00d71 cell} % grRules: {13417\u00d71 cell} % rxnGeneMat: [13417\u00d73625 double] % subSystems: {13417\u00d71 cell} % eccodes: {13417\u00d71 cell} % genes: {3625\u00d71 cell} % metNames: {10138\u00d71 cell} % metComps: [10138\u00d71 double] % inchis: {10138\u00d71 cell} % metFormulas: {10138\u00d71 cell} % unconstrained: [10138\u00d71 double] % rxnReferences: {13417\u00d71 cell} % rxnFrom: {13417\u00d71 cell} % metFrom: {10138\u00d71 cell} % rxnConfidenceScores: [13417\u00d71 double] % metCharges: [10138\u00d71 int64] % version: '1.3.1' % annotation: [1\u00d71 struct]","title":"From the HumanGEM.mat file (recommended)"},{"location":"getting_started/#from-the-humangemyml-file-recommended-if-not-on-master-branch","text":"The yaml version of Human-GEM is loaded using the importHumanYaml function. ihuman = importHumanYaml('HumanGEM.yml'); % Start importing... % metaData % metabolites % reactions % genes % compartments % % importing completed % follow-up processing... Done!","title":"From the HumanGEM.yml file (recommended if not on master branch)"},{"location":"getting_started/#from-the-humangemxml-sbml-file","text":"The .xml (SBML) version of Human-GEM is loaded using the RAVEN importHumanYaml function. ihuman = importModel(which('HumanGEM.xml')); % The model contains 0 errors and 1 warnings. % % WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): % HMR_7161 % HMR_7162 % ATPasel Note The warning regarding the grRules can be ignored. Some packages are a bit more strict in their gene-reaction rule formulation, but Human-GEM functions have no such restrictions. Note We include the which() command around the model filename to provide its full path because some functions cannot otherwise find the file. This is not necessary if the model file is in MATLAB's current working directory (i.e., if you can see the model file in the Current Folder window).","title":"From the HumanGEM.xml (SBML) file"},{"location":"getting_started/#from-the-humangemxlsx-file","text":"The .xslx (Excel) version of Human-GEM is loaded using the RAVEN importExcelModel function. ihuman = importExcelModel(which('HumanGEM.xlsx')); % WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): % HMR_7161 % HMR_7162 % ATPasel % % WARNING: The following InChI strings are associated to more than one unique metabolite name: % 1S/C27H46O2/c1-18(2)7-6-14-27(5,29)24-11-10-22-21-9-8-19-17-20(28)12-15-25(19,3)23(21)13-16-26(22,24)4/h8,18,20-24,28-29H,6-7,9-17H2,1-5H3/t20-,21-,22-,23-,24-,25-,26-,27-/m0/s1 % 1S/C42H58NO/c1-32(20-22-39-35(4)17-12-25-41(39,6)7)14-10-16-34(3)30-38-31-37(24-27-43(38)28-29-44)19-11-15-33(2)21-23-40-36(5)18-13-26-42(40,8)9/h10-11,14-16,19-24,27,30-31,44H,12-13,17-18,25-26,28-29H2,1-9H3/q+1 Important By default, importExcelModel will remove the boundary metabolites (those in the x compartment) from the model. To prevent removal of the boundary metabolites, specify false in the second argument: importExcelModel('HumanGEM.xlsx', false) .","title":"From the HumanGEM.xlsx file"},{"location":"getting_started/#from-the-humangemtxt-file","text":"There is no function to import the .txt version of the model. The HumanGEM.txt file is supplied for those who need or prefer a more human-readable plain-text format, but is not intended for loading into MATLAB.","title":"From the HumanGEM.txt file"},{"location":"getting_started/#using-human-gem-with-cobra","text":"Using the provided Human-GEM models directly with COBRA is likely to cause errors or unexpected behavior. Therefore, the model should first be converted to a COBRA-friendly format before using the COBRA Toolbox.","title":"Using Human-GEM with COBRA"},{"location":"getting_started/#1-load-the-model-into-matlab","text":"Use one of the methods described above to load Human-GEM into MATLAB. load('HumanGEM.mat'); % loads model as structure named \"ihuman\"","title":"1. Load the model into MATLAB"},{"location":"getting_started/#2-convert-the-model-into-cobra-format","text":"Use the RAVEN ravenCobraWrapper function to convert the model into a COBRA-friendly format. model = ravenCobraWrapper(ihuman); % Converting RAVEN structure to COBRA.. The resulting model output should now be ready for use with the COBRA Toolbox.","title":"2. Convert the model into COBRA format"},{"location":"getting_started/#alternative-approach-not-recommended","text":"Another option is to load the SBML model HumanGEM.xml directly into COBRA format using the COBRA readCbModel function. model = readCbModel(which('HumanGEM.xml')); % The model contains 0 errors and 1 warnings. Warning Since the SBML file is not formatted for COBRA, the resulting model may be missing content or exhibit unexpected behavior. Proceed with caution.","title":"Alternative approach (not recommended)"},{"location":"installation/","text":"Installation Human-GEM The Human-GEM model is maintained in a GitHub repository to track changes and facilitate collaboration. In addition to several different model formats (e.g., .mat , .xml , .yml ), the repository contains a number of functions and data files that support Human-GEM analysis, maintenance, editing, and other actions. We therefore recommend cloning the GitHub repository to gain full functionality and easy access to the most updated version of Human-GEM. 1. Clone the repository (recommended) Clone the repository using git . Navigate to the directory where you would like to save the Human-GEM repository, and in the command line/terminal run: git clone https://github.com/SysBioChalmers/Human-GEM.git This will create a copy of the repository contents on your local machine. 1b. Alternative: Download as a .zip The latest release of the repository can be downloaded as a .zip or .tar.gz file . Download the file using the link, and unzip/expand the file. 2. Add the repository to the MATLAB path In order for MATLAB to find and use the functions and files in the repository directory (and subdirectories), they need to be added to the PATH. In MATLAB, select HOME from the top menu bar, and choose Set Path and then Add with Subfolders... . Choose the code/ , data/ , and modelFiles/ subdirectories in the Human-GEM folder to be added to the path, and click Save when finished. Alternatively, you can run the following lines in MATLAB: cd /my/path/Human-GEM % replace \"/my/path/\" with the actual path to the Human-GEM folder addpath(strjoin(cellfun(@genpath, split(ls), 'UniformOutput', false), '')); savepath Ignore the Warning: Name is nonexistent or not a directory messages. Required software MATLAB [R2018 or newer] MATLAB is the primary software used for working with Human-GEM. Unfortunately, MATLAB is not free, though a ( 30-day trial ) is available. The RAVEN Toolbox [v2.3.1 or newer] The Human-GEM model files are provided in RAVEN-friendly format, and many of the functions in the Human-GEM repository depend on the RAVEN Toolbox. Ensure that the RAVEN Toolbox is installed and added to your MATLAB path. See the RAVEN installation instructions for more detail. Additional dependencies The COBRA Toolbox The COBRA Toolbox is not required for most of the functions associated with Human-GEM. However, it offers many additional analysis tools that are not available in RAVEN. Important The Human-GEM model files are formatted for use with the RAVEN Toolbox. Before using the model with the COBRA toolbox, convert the model to a COBRA-friendly format in MATLAB using the ravenCobraWrapper function from the RAVEN Toolbox: cobraModel = ravenCobraWrapper(ravenModel); Note There is an ongoing effort to align the model structures of RAVEN and COBRA to eliminate compatibility issues, so hopefully this will soon be a problem of the past. Linear optimization solver A solver is required to run flux balance analysis (FBA), GEM extraction (using tINIT), or any other function involving an optimization. Compatible solvers are Gurobi Optimizer, MOSEK, or GLPK. For instructions on how to set up a solver and obtain a license (if required), see the RAVEN instructions .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#human-gem","text":"The Human-GEM model is maintained in a GitHub repository to track changes and facilitate collaboration. In addition to several different model formats (e.g., .mat , .xml , .yml ), the repository contains a number of functions and data files that support Human-GEM analysis, maintenance, editing, and other actions. We therefore recommend cloning the GitHub repository to gain full functionality and easy access to the most updated version of Human-GEM.","title":"Human-GEM"},{"location":"installation/#1-clone-the-repository-recommended","text":"Clone the repository using git . Navigate to the directory where you would like to save the Human-GEM repository, and in the command line/terminal run: git clone https://github.com/SysBioChalmers/Human-GEM.git This will create a copy of the repository contents on your local machine.","title":"1. Clone the repository (recommended)"},{"location":"installation/#1b-alternative-download-as-a-zip","text":"The latest release of the repository can be downloaded as a .zip or .tar.gz file . Download the file using the link, and unzip/expand the file.","title":"1b. Alternative: Download as a .zip"},{"location":"installation/#2-add-the-repository-to-the-matlab-path","text":"In order for MATLAB to find and use the functions and files in the repository directory (and subdirectories), they need to be added to the PATH. In MATLAB, select HOME from the top menu bar, and choose Set Path and then Add with Subfolders... . Choose the code/ , data/ , and modelFiles/ subdirectories in the Human-GEM folder to be added to the path, and click Save when finished. Alternatively, you can run the following lines in MATLAB: cd /my/path/Human-GEM % replace \"/my/path/\" with the actual path to the Human-GEM folder addpath(strjoin(cellfun(@genpath, split(ls), 'UniformOutput', false), '')); savepath Ignore the Warning: Name is nonexistent or not a directory messages.","title":"2. Add the repository to the MATLAB path"},{"location":"installation/#required-software","text":"","title":"Required software"},{"location":"installation/#matlab","text":"[R2018 or newer] MATLAB is the primary software used for working with Human-GEM. Unfortunately, MATLAB is not free, though a ( 30-day trial ) is available.","title":"MATLAB"},{"location":"installation/#the-raven-toolbox","text":"[v2.3.1 or newer] The Human-GEM model files are provided in RAVEN-friendly format, and many of the functions in the Human-GEM repository depend on the RAVEN Toolbox. Ensure that the RAVEN Toolbox is installed and added to your MATLAB path. See the RAVEN installation instructions for more detail.","title":"The RAVEN Toolbox"},{"location":"installation/#additional-dependencies","text":"","title":"Additional dependencies"},{"location":"installation/#the-cobra-toolbox","text":"The COBRA Toolbox is not required for most of the functions associated with Human-GEM. However, it offers many additional analysis tools that are not available in RAVEN. Important The Human-GEM model files are formatted for use with the RAVEN Toolbox. Before using the model with the COBRA toolbox, convert the model to a COBRA-friendly format in MATLAB using the ravenCobraWrapper function from the RAVEN Toolbox: cobraModel = ravenCobraWrapper(ravenModel); Note There is an ongoing effort to align the model structures of RAVEN and COBRA to eliminate compatibility issues, so hopefully this will soon be a problem of the past.","title":"The COBRA Toolbox"},{"location":"installation/#linear-optimization-solver","text":"A solver is required to run flux balance analysis (FBA), GEM extraction (using tINIT), or any other function involving an optimization. Compatible solvers are Gurobi Optimizer, MOSEK, or GLPK. For instructions on how to set up a solver and obtain a license (if required), see the RAVEN instructions .","title":"Linear optimization solver"}]}