{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Human-GEM User Guide","text":"<p>Important</p> <p>This guide applies to Human-GEM version v1.12.0. If you are using a different version of Human-GEM, we cannot guarantee that it will function as described in this guide.</p>"},{"location":"#overview","title":"Overview","text":"<p>This guide contains instructions and examples of how to use Human-GEM, a human genome-scale metabolic model (GEM). Choose a section from the sidebar or the list below to get started!</p> <ul> <li>Installation</li> <li>Getting started</li> <li>Flux balance analysis</li> <li>GEM extraction using ftINIT</li> <li>GEM comparison</li> <li>GEM extraction from single-cell RNA-Seq data</li> <li>Gene essentiality with DepMap</li> <li>Additional tools</li> <li>FAQs and troubleshooting</li> <li>Contact</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>J. L. Robinson, et al. An atlas of human metabolism. Sci. Signal. 13, eaaz1482 (2020). doi:10.1126/scisignal.aaz1482</p> <p></p> <p> </p>"},{"location":"additional_tools/","title":"Additional tools and features","text":"<p>The Human-GEM model and repository contain many tools and features that are not covered in detail (or at all) in the examples presented in this guide. These features are described below.</p>"},{"location":"additional_tools/#gene-idname-conversion","title":"Gene ID/name conversion","text":"<p>The <code>translateGrRules</code> function enables quick and easy conversion of model gene IDs to a different type, such as gene abbreviations, NCBI (Entrez) IDs, or UniProt IDs.</p> <pre><code>% generate model gene-related fields that use gene names (abbreviations)\n[grRules, genes, rxnGeneMat] = translateGrRules(model.grRules, 'Name');\n\n% update the model fields with new gene ID type\nmodel.grRules = grRules;\nmodel.genes = genes;\nmodel.rxnGeneMat = rxnGeneMat;\n</code></pre> <p>In some cases, ID associations are non-unique or missing; e.g., one Ensembl ID is associated with multiple gene names, one gene name is associated with multiple Ensembl IDs, or there is no gene name corresponding to an Ensembl ID. Such cases are handled as follows:</p> <p>1. Original ID is associated with multiple new IDs</p> <p>The original ID will be replaced with all matching new IDs, which are then formulated as isozymes. For example, if the original grRule is</p> <pre><code>'geneA and geneB'\n</code></pre> <p>and <code>geneB</code> is associated with <code>id1</code>, <code>id2</code>, and <code>id3</code>, the new grRule will be</p> <pre><code>'geneA and (id1 or id2 or id3)'\n</code></pre> <p>2. Multiple original IDs are associated with the same new ID</p> <p>The original IDs will be replaced with this new ID, and any duplications in grRules will be automatically detected and removed. For example, if the original grRule is</p> <pre><code>'geneA or geneB or geneC'\n</code></pre> <p>and <code>geneB</code> and <code>geneC</code> are both associated with <code>id1</code>, the new grRule will be</p> <pre><code>'geneA or id1'\n</code></pre> <p>3. Original ID is not associated with any new IDs</p> <p>In this case, the original ID will be removed from the model. Such cases will therefore result in information loss if genes are converted to new IDs and then again back to the original IDs.</p> <p>Note</p> <p>The <code>translateGrRules</code> function has an optional <code>noMatch</code> input, where users can change how IDs without a match are treated. This input defaults to <code>'delete'</code>, but if <code>'original'</code> is specified, it will simply keep the original ID. Be aware that this will result in mixed ID types, which may be problematic.</p>"},{"location":"contact/","title":"Contact","text":"<p>If you have questions or need additional help in using the Human-GEM model and/or repository, we recommend that you use the Human-GEM Gitter chat or post a question in the Human-GEM Discussions. These options are preferred, because other users are likely to have similar questions, and will be able to see our posted answers.</p> <p>If you find any problems or errors in the Human-GEM model or repository, feel free to create an issue on GitHub.</p> <p>Alternatively, you can email us at contact@metabolicatlas.org.</p>"},{"location":"faq_troubleshoot/","title":"Frequently asked questions and troubleshooting","text":""},{"location":"faq_troubleshoot/#frequently-asked-questions-faqs","title":"Frequently asked questions (FAQs)","text":""},{"location":"faq_troubleshoot/#does-human-gem-contain-an-atp-maintenance-reaction","title":"Does Human-GEM contain an ATP maintenance reaction?","text":"<p>Yes, <code>MAR03964</code> is an ATP hydrolysis reaction:</p> <pre><code>constructEquations(ihuman, 'MAR03964')\n\nans =\n\n  1\u00d71 cell array\n\n    {'ATP[c] + H2O[c] =&gt; ADP[c] + H+[c] + Pi[c]'}\n</code></pre>"},{"location":"faq_troubleshoot/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq_troubleshoot/#biomass-flux-is-zero","title":"Biomass flux is zero","text":"<p>Problem: Running FBA on Human-GEM or a model derived from Human-GEM with a biomass reaction as the objective results in a solution with zero flux, even when all exchange reaction bounds are open.</p> <p>Solution: Convert the model to \"open\" format, meaning that it does not contain any \"boundary\" (\"unconstrained\") metabolites.</p> <pre><code>% using RAVEN: use the simplifyModel function\nmodel = simplifyModel(model);\n\n% using COBRA: find and remove all boundary metabolites\n[~, boundary_comp_index] = ismember('Boundary', model.compNames);\nif isfield(model, 'metComps')\n    model = removeMetabolites(model, model.mets(model.metComps == boundary_comp_index));\nend\n</code></pre>"},{"location":"faq_troubleshoot/#github-discussions","title":"GitHub Discussions","text":"<p>For additional questions and discussions related to Human-GEM, check out the Discussions page within the Human-GEM GitHub repository! Feel free to submit a question there if you cannot find a solution to your problem.</p>"},{"location":"flux_balance_analysis/","title":"Flux Balance Analysis","text":"<p>One of the most common analysis methods for GEMs is flux balance analysis (FBA). This page will briefly walk through the basics of using FBA with Human-GEM.</p> <p>Important</p> <p>You must have a linear optimization solver (e.g., Gurobi) installed and accessible by MATLAB to run FBA. See the installation page of this guide or the RAVEN instructions for details on setting up a solver.</p>"},{"location":"flux_balance_analysis/#optimization-objective","title":"Optimization objective","text":"<p>By default, the model objective (defined by the <code>.c</code> model field) is set to maximize flux through the generic human biomass reaction (<code>MAR13082</code>), and all exchange reactions are open.</p> <pre><code>ihuman.rxns(ihuman.c == 1)\n\n% ans =\n% \n%   1\u00d71 cell array\n% \n%     {'MAR13082'}\n</code></pre>"},{"location":"flux_balance_analysis/#run-fba","title":"Run FBA","text":"<p>Run FBA using the RAVEN <code>solveLP</code> function.</p> <pre><code>sol = solveLP(ihuman)\n\n% sol = \n% \n%   struct with fields:\n% \n%        x: [13070\u00d71 double]\n%        f: -187.3536\n%     stat: 1\n%      msg: 'Optimal solution found'\n</code></pre> <p>The <code>sol.f</code> field contains the (negative) value of the objective, and the <code>sol.x</code> vector contains the flux value for each reaction.</p> <p>Important</p> <p>As mentioned, all the exchange reactions are fully opened (upper and lower bounds set to 1000 and -1000, respectively). Therefore, the value of the biomass flux here is meaningless (except that it is nonzero), and its units are undefined. Additional constraints, such as those defining the flux bounds of exchange reactions, are necessary to define a feasible solution space.</p>"},{"location":"flux_balance_analysis/#an-fba-example","title":"An FBA example","text":""},{"location":"flux_balance_analysis/#calculation-of-atp-yield","title":"Calculation of ATP yield","text":"<p>To illustrate an example of a more meaningful flux solution, we can use FBA to calculate ATP yield (more specifically, the amount of ADP phosphorylated) per glucose consumed. </p> <p>ATP yield can be quantified by the amount of flux through the ATP hydrolysis reaction <code>MAR03964</code>.</p> <pre><code>constructEquations(ihuman, 'MAR03964')\n\n% ans =\n% \n%   1\u00d71 cell array\n% \n%     {'ATP[c] + H2O[c] =&gt; ADP[c] + H+[c] + Pi[c]'}\n</code></pre> <p>Change the objective to maximize flux through the ATP hydrolysis reaction:</p> <pre><code>ihuman = setParam(ihuman, 'obj', 'MAR03964', 1);\n</code></pre> <p>Prevent import of all metabolites except glucose, for which the max import flux is set to 1 (mmol/gDW/h):</p> <pre><code>ihuman = setExchangeBounds(ihuman, 'glucose', -1);  % negative flux indicates import\n</code></pre> <p>Note</p> <p>By default, the <code>setExchangeBounds</code> function allows unrestricted export of all metabolites. The import of all metabolites is blocked, except for the metabolites specified in the input argument.</p> <p>Now perform FBA to determine the maximum amount of ATP hydrolyzed (ADP phosphorylated) per equivalent of glucose consumed.</p> <pre><code>sol = solveLP(ihuman)\n\n% sol = \n% \n%   struct with fields:\n% \n%        x: [13070\u00d71 double]\n%        f: -2\n%     stat: 1\n%      msg: 'Optimal solution found'\n</code></pre> <p>As expected, the theoretical mol ADP phosphorylated per mol glucose consumed is 2. Note that we have not allowed the import of oxygen, so this is under anaerobic conditions. This is of course purely theoretical given that most humans produce very little of anything when deprived of oxygen.</p> <p>Let us now calculate the same ATP yield, but in the present of oxygen. We first need to update the exchange constraints:</p> <pre><code>ihuman = setExchangeBounds(ihuman, {'glucose', 'O2'}, [-1, -1000]);\n</code></pre> <p>Note that we are allowing effectively infinite oxygen consumption, since we are interested in non-O2-limited ATP yield per glucose. Now re-run the FBA to see how the maximum yield has changed:</p> <pre><code>sol = solveLP(ihuman)\n\n% sol = \n% \n%   struct with fields:\n% \n%        x: [13070\u00d71 double]\n%        f: -31.5000\n%     stat: 1\n%      msg: 'Optimal solution found'\n</code></pre> <p>We now see a much higher ATP yield per glucose consumed of 31.5.</p>"},{"location":"gem_comparison/","title":"Structural and functional comparison of GEMs","text":"<p>A useful approach in comparing the metabolic network of different tissues or cell types is to compare their corresponding GEMs. There are many ways in which the structure and function of different GEMs can be compared, but this guide will focus on an approach similar to that employed in the Human-GEM publication.</p> <p>Important</p> <p>The model comparison approach presented here only applies to GEMs that were extracted from the same reference GEM, such that they share the same namespace (i.e., same reaction, metabolite, and gene ID types). </p>"},{"location":"gem_comparison/#prepare-the-gems","title":"Prepare the GEMs","text":"<p>To demonstrate some model comparison methods, we will present an example based on the Human-GEM publication. The data and GEMs can be retrieved from the Zenodo repository associated with the publication. </p> <p>Load the <code>.mat</code> file containing the tissue-specific GEMs that were extracted using GTEx RNA-Seq profiles.</p> <pre><code>% replace '/my/path/' with the actual path on your machine\nload('/my/path/tINIT_GEMs/run_tINIT_outputs/GTEx/tINIT_GTEx_outputs.mat');\n</code></pre> <p>The <code>tINIT_GTEx_outputs.mat</code> will be loaded as a structure named <code>INIT_output</code>.</p> <pre><code>INIT_output\n\n% INIT_output = \n% \n%   struct with fields:\n% \n%        id: {30\u00d71 cell}\n%     model: {30\u00d71 cell}\n</code></pre> <p>Note</p> <p>A cell array of models such as the one in the <code>model</code> field of the <code>INIT_output</code> structure can be generated by <code>models = {liverGEM; lungGEM; kidneyGEM; ... };</code>, where each GEM is a separate extracted model to be compared.</p> <p>Extract the fields as separate variables.</p> <pre><code>model_ids = INIT_output.id;\nmodels = INIT_output.model;\n</code></pre> <p>For convenience, the model ID for each GEM was extracted and saved as a cell array in the <code>id</code> field of the <code>INIT_output</code> structure. However, this can be regenerated from the model array:</p> <pre><code>model_ids = arrayfun(@(i) models{i}.id, (1:numel(models))', 'UniformOutput', false);\n</code></pre>"},{"location":"gem_comparison/#compare-gem-structures","title":"Compare GEM structures","text":"<p>The RAVEN <code>compareMultipleModels</code> function can be used to compare some basic features of different models such as reaction content and subsystem coverage.</p> <p>Call the comparison function with the model array <code>models</code> as input.</p> <pre><code>res = compareMultipleModels(models);\n\n%  Getting model IDs \n% *** Done \n% \n% \n%  Comparing subsystem utilization \n% *** Done \n% \n% \n%  Comparing model reaction correlations \n% *** Done \n% \n% \n%  Comparing model reaction structures \n% *** Done\n</code></pre> <p>Take a look at the contents of the results structure <code>res</code>.</p> <pre><code>res\n\n% res = \n% \n%   struct with fields:\n% \n%          modelIDs: {30\u00d71 cell}\n%        subsystems: [1\u00d71 struct]\n%         reactions: [1\u00d71 struct]\n%        structComp: [30\u00d730 double]\n%     structCompMap: [30\u00d73 double]\n</code></pre> <p>Detail on the meaning of each output can be found in the <code>compareMultipleModels</code> function description (view using <code>help compareMultipleModels</code>), but a brief overview is provided here:</p> Field Subfield\u00a0\u00a0\u00a0\u00a0 Description modelIDs -- List of GEM IDs subsystems ID List of subsystem IDs corresponding to rows in matrix subfield matrix Number of reactions in each subsystem for each GEM reactions IDs List of reaction IDs corresponding to rows in matrix subfield matrix Binary matrix denoting presence (1) or absence (0) of each reaction in each GEM structComp -- Hamming similarity of reaction content between each pair of GEMs structCompMap\u00a0\u00a0 -- Reduced dimension (tSNE) mapping of GEMs based on the Hamming distances of their reaction content <p></p> <p>The <code>compareMultipleModels</code> function represents the reaction content of each GEM as a binary vector (missing reactions are 0, present reactions are 1) to enable the use of quantitative comparison metrics, such as Hamming distance. GEMs that share fewer reactions will be separated by a larger Hamming distance, whereas GEMs that contain many of the same reactions will exhibit a small Hamming distance.</p> <p>Visualize the reaction content Hamming similarity (1 - Hamming distance) among the GEMs using a clustergram.</p> <pre><code>clustergram(res.structComp, 'Symmetric', false, 'Colormap', 'bone', 'RowLabels', res.modelIDs, 'ColumnLabels', res.modelIDs);\n</code></pre> <p></p> <p>Note</p> <p>Given the generally poor plotting capabilities and limited color palette options in MATLAB, an option is to export the <code>res.structComp</code> matrix and/or other results to a csv or text file and import them into R, python, or some other package with more plotting flexibility.</p> <p>The <code>structCompMap</code> field of the model comparison results structure contains a mapping of the GEMs' binary reaction vectors in reduced (3) dimensions using tSNE. Since 3D plots can be difficult to interpret, we can regenerate the mapping in 2 dimensions.</p> <pre><code>rxn2Dmap = tsne(res.reactions.matrix', 'Distance', 'hamming', 'NumDimensions', 2, 'Perplexity', 5);\n\n% plot and label the GEMs in tSNE space\nscatter(rxn2Dmap(:,1), rxn2Dmap(:,2));\nhold on\ntext(rxn2Dmap(:,1), rxn2Dmap(:,2), res.modelIDs);\n</code></pre> <p></p> <p>The Hamming distance heatmap and tSNE projection give an overall picture of how similar or different models are from one another, but it does not resolve the cause or biological meaning of those differences. A convenient source of biological context is the <code>subSystems</code> field in the model, which describes the metabolic subsystem or pathway to which reactions belong. We can therefore look at differences in reaction content in each of these subsystems to see which parts of metabolism differ most among the GEMs.</p> <p>To simplify the interpretation of results, select a subset of GEMs to analyze further.</p> <pre><code>useModels = {'adipose tissue', 'blood', 'kidney', 'liver', 'muscle'};\nkeep = ismember(res.modelIDs, useModels);\nsubMat = res.subsystems.matrix(:, keep);\n</code></pre> <p>Calculate the percent difference of GEM subsystem coverage (number of reactions in the subsystem) from the mean coverage.</p> <pre><code>subCoverage = (subMat - mean(subMat, 2)) ./ mean(subMat, 2) * 100;\n</code></pre> <p>Visualize the difference in subsystem coverage with a clustergram, including only subsystems with at least a 25% difference in one or more GEMs.</p> <pre><code>% select subsystems to include in plot\ninclSub = any(abs(subCoverage) &gt; 25, 2);\nsubNames = res.subsystems.ID(inclSub);\n\n% generate clustergram\ncg = clustergram(subCoverage(inclSub,:), 'Colormap', redbluecmap, 'DisplayRange', 100, 'rowLabels', subNames, 'columnLabels', useModels, 'ShowDendrogram', 'OFF');\n</code></pre> <p></p> <p>Tip</p> <p>The <code>clustergram</code> function is very limited in how the produced heatmap can be modified. After running the <code>cg = clustergram(...)</code> command, close the figure and use <code>plot(cg)</code> to render a new version of the heatmap that has more editing options.</p>"},{"location":"gem_comparison/#compare-gem-functions","title":"Compare GEM functions","text":"<p>In addition to GEM structure, the functionality of GEMs can be compared to provide insight into differences in their metabolic activity. One way in which the function of a GEM can be assessed is by evaluating its ability to perform different metabolic tasks.</p> <p>The GTEx tissue GEMs used in this example were generated using tINIT with a list of 57 essential tasks (see the GEM extraction section of this guide for details). Therefore, comparing the GEMs' ability to complete these 57 tasks would be highly uninteresting because they were all generated with the requirement that these tasks are functional. For a more interesting comparison, we will instead use a different list of 256 metabolic tasks.</p> <p>To speed up the calculation and to narrow the focus, we will include only a few of the GEMs in this comparison.</p> <pre><code>useModels = {'adipose tissue', 'blood', 'kidney', 'liver', 'muscle'};\nkeep = ismember(res.modelIDs, useModels);\n</code></pre> <p>The larger metabolic task file <code>metabolicTasks_Full.xlsx</code> can be found in the <code>/data/metabolicTasks/</code> subdirectory of the Human-GEM repository.</p> <pre><code>% replace '/my/path/' with the actual path on your machine\ntaskFileName = '/my/path/Human-GEM/data/metabolicTasks/metabolicTasks_Full.xlsx';\n</code></pre> <p>Re-run the <code>compareMultipleModels</code> function, now including the location of the metabolic task file.</p> <pre><code>res_func = compareMultipleModels(models(keep), false, false, [], true, taskFile);\n\n%  Getting model IDs \n% *** Done \n% \n% \n%  Comparing subsystem utilization \n% *** Done \n% \n% \n%  Comparing model reaction correlations \n% *** Done \n% \n% \n%  Comparing model reaction structures \n% *** Done \n% \n% \n%  Checking model performance on specified tasks. \n% \n%  Checking model # 1 \n% ERROR: Could not find all inputs in \"[71] Cystine de novo synthesis (minimal substrates, minimal excretion)\"\n% \n%  Checking model # 2 \n% ERROR: Could not find all inputs in \"[71] Cystine de novo synthesis (minimal substrates, minimal excretion)\"\n% ERROR: Could not find all outputs in \"[103] Heme de novo synthesis (minimal substrates, physiological excretion)\"\n% ERROR: Could not find all inputs in \"[249] Bilirubin conjugation (minimal substrates, physiological excretion)\"\n% \n%  Checking model # 3 \n% ERROR: Could not find all inputs in \"[71] Cystine de novo synthesis (minimal substrates, minimal excretion)\"\n% \n%  Checking model # 4 \n% ERROR: Could not find all inputs in \"[71] Cystine de novo synthesis (minimal substrates, minimal excretion)\"\n% \n%  Checking model # 5 \n% ERROR: Could not find all inputs in \"[71] Cystine de novo synthesis (minimal substrates, minimal excretion)\"\n% ERROR: Could not find all inputs in \"[249] Bilirubin conjugation (minimal substrates, physiological excretion)\"\n% *** Done \n</code></pre> <p>Note</p> <p>The ERROR messages here are not actual errors, but indicate that a task was failed because the GEM was missing one or more metabolites involved in the test.</p> <p>The results structure will now have an additional <code>funcComp</code> field.</p> <pre><code>res_func.funcComp\n\n% ans = \n% \n%   struct with fields:\n% \n%     matrix: [256\u00d75 double]\n%      tasks: {256\u00d71 cell}\n</code></pre> <p>The <code>matrix</code> subfield is a binary matrix indicating whether each task passed (1) or failed (0) in each GEM, and the <code>tasks</code> subfield contains the name of the evaluated tasks.</p> <p>Identify which tasks differed among the GEMs (i.e., not all passed or all failed).</p> <pre><code>isDiff = ~all(res_func.funcComp.matrix == 0, 2) &amp; ~all(res_func.funcComp.matrix == 1, 2);\ndiffTasks = res_func.funcComp.tasks(isDiff)\n\n% diffTasks =\n% \n%   18\u00d71 cell array\n% \n%     {'ATP salvage from Hypoxanthine'                                                             }\n%     {'Gluconeogenesis from Alanine'                                                              }\n%     {'Arginine de novo synthesis (minimal substrates, minimal excretion)'                        }\n%     {'Glycine de novo synthesis (minimal substrates, minimal excretion)'                         }\n%     {'Proline de novo synthesis (minimal substrates, minimal excretion)'                         }\n%     {'Tyrosine de novo synthesis (minimal substrates with AA, minimal excretion)'                }\n%     {'Ornithine degradation'                                                                     }\n%     {'Urea from alanine'                                                                         }\n%     {'Urea from glutamine'                                                                       }\n%     {'Creatine de novo synthesis (minimal substrates, physiological excretion)'                  }\n%     {'Heme de novo synthesis (minimal substrates, physiological excretion)'                      }\n%     {'NAD de novo synthesis (minimal substrates, physiological excretion)'                       }\n%     {'NADP de novo synthesis (minimal substrates, physiological excretion)'                      }\n%     {'Acetoacetate de novo synthesis'                                                            }\n%     {'DHA de novo synthesis (minimal substrates, physiological excretion)'                       }\n%     {'Taurocholate de novo synthesis and excretion (minimal substrates, physiological excretion)'}\n%     {'Bilirubin conjugation (minimal substrates, physiological excretion)'                       }\n%     {'NH3 import and degradation'                                                                }\n</code></pre> <p>Generate a scatter plot to visualize GEM performance on the subset of tasks that differed.</p> <pre><code>% visualize the matrix\nspy(res_func.funcComp.matrix(isDiff,:), 30);\n\n% apply some formatting changes\nset(gca, 'XTick', 1:numel(useModels), 'XTickLabel', useModels, 'XTickLabelRotation', 90, ...\n    'YTick', 1:numel(diffTasks), 'YTickLabel', diffTasks, 'YAxisLocation', 'right');\nxlabel(gca, '');\n</code></pre> <p></p>"},{"location":"gem_extraction/","title":"GEM Extraction","text":"<p>Human-GEM is a generic model of human metabolism, meaning that it contains metabolic reactions known to occur in any human cell. The model is therefore not representative of any one tissue or cell type, in which only a subset of the reactions would be active.</p> <p>A common approach is to extract the subset of the GEM that is likely to be active in the tissue or cell type of interest, based on a corresponding dataset (e.g., transcriptomics, proteomics, metabolomics, etc.). This approach is often referred to as GEM extraction or contextualization, where the generated model is termed the extracted or contextualized/context-specific GEM.</p>"},{"location":"gem_extraction/#fast-taskdriven-integrative-network-inference-for-tissues-ftinit","title":"Fast Task\u2010driven Integrative Network Inference for Tissues (ftINIT)","text":"<p>Although many GEM extraction methods exist, this guide will cover the ftINIT algorithm. For more details on the algorithm, see the following papers:</p> <ol> <li>Agren et al. (2012) PLoS Comput Biol - Initial development of INIT</li> <li>Agren et al. (2014) Mol Syst Biol - Incorporation of metabolic tasks (tINIT)</li> <li>Robinson et al. (2020) Sci Signal - Recognition of enzyme complexes</li> <li>Gustafsson et al. (2022) PNAS - ftINIT, faster and produces less gaps in the models</li> </ol> <p>The ftINIT algorithm is available in the RAVEN Toolbox, and we use it together with help functions for Human-GEM available in the Human-GEM repository.</p> <p>To support users of the previous algorithm (tINIT), we also include a guide for the previous (2020) version of tINIT, called the <code>getINITModel2</code> function.</p>"},{"location":"gem_extraction/#retrieve-the-data","title":"Retrieve the data","text":"<p>To demonstrate the use of ftINIT, we will walk through an example where we generate models from GTEx data. For simplicity, we extracted 60 RNA-Seq profiles from in total 12 tissues. The data can be downloaded here  together with other data useful for this tutorial. </p> <p>Download the Zenodo repository .zip file, and extract.</p>"},{"location":"gem_extraction/#load-and-prepare-the-reference-model-for-use-with-ftinit","title":"Load and prepare the reference model for use with ftINIT","text":"<p>The reference GEM from which the tissue-specific models will be extracted is Human-GEM. Load the model from the <code>Human-GEM.mat</code> file in the Human-GEM repository</p> <pre><code>load('Human-GEM.mat');  % loads model as a structure named \"ihuman\"\n</code></pre> <p>ftINIT has a preparation step that needs to be run once for a reference model such as Human-GEM. The purpose of the preparation step is to make calculations in advance to reduce the time it takes to generate each context-specific model. The result is a prepData structure that contains various information needed by ftINIT. This operation takes 1-2 hours on a standard laptop computer, so make sure to save it once it has completed. For version 1.12.0 of Human-GEM, the prepData is available in the Zenodo .zip file.</p> <pre><code>% The second flag indicates if the model should be converted to gene symbols from ENSEMBL. This has to be decided at this point.\n% Replace path/to/HumanGEM with your local path to the Human-GEM repo root.\n% For use with animal models derived from Human-GEM, such as Mouse-GEM, both the model and paths needs to be replaced. Also, \n% the convert genes flag may be irrelevant depending on the if ENSEMBL genes are used in that model.\nprepData = prepHumanModelForftINIT(ihuman, false, 'path/to/HumanGEM/data/metabolicTasks/metabolicTasks_Essential.txt', 'path/to/HumanGEM/model/reactions.tsv');\nsave('prepData.mat', 'prepData')\n</code></pre> <p><code>prepHumanModelForftINIT</code> tests that the reference model (Human-GEM) can successfully perform all essential metabolic tasks (defined in <code>data/metabolicTasks/metabolicTasks_Essential.txt</code>), which is an important step. If the reference model cannot perform a task, then neither can any GEM extracted from that model.</p> <p>Note</p> <p>The exchange reactions should all be unbounded (e.g., lower and upper bounds of -1000 and 1000, respectively). Human-GEM is already provided in this format, so no additional changes are needed.</p> <p>Note</p> <p>The function <code>prepHumanModelForftINIT</code> will automatically use the essential tasks from <code>metabolicTasks_Essential.txt</code> in the Human-GEM repository. To specify different metabolic tasks, use <code>prepINITModel</code> in RAVEN directly instead.</p>"},{"location":"gem_extraction/#prepare-the-transcriptomic-data","title":"Prepare the transcriptomic data","text":"<p>Data from the condition, tissue, or cell type for which the GEM will be generated is necessary to determine which reactions from the reference model (Human-GEM) should be included. In this case, we use a file with tissues extracted from the GTEx database, which is available in the Zenodo .zip file.</p> <p>In MATLAB, load the <code>gtexSampForTutorialTPM.txt</code> file from the Zenodo repository.</p> <pre><code>% replace 'my/path/' with the path on your system, or change to the directory containing the file\ngtex_data = readtable('my/path/gtexSampForTutorialTPM.txt');\n[~, n] = size(gtex_data);\nnumSamp = n-2; %the first two columns are the genes in ENSEMBL and gene symbols format\n\n% take a look at the first few rows and columns of the table\ngtex_data(1:5, 1:5)\n% ans =\n% \n%   5\u00d75 table\n% \n%            Name              Description      GTEX_111YS_0006_SM_5NQBE    GTEX_1122O_0005_SM_5O99J    GTEX_1128S_0005_SM_5P9HI\n%     ___________________    _______________    ________________________    ________________________    ________________________\n% \n%     {'ENSG00000223972'}    {'DDX11L1'    }            0.02171                     0.03015                      0.0203         \n%     {'ENSG00000227232'}    {'WASH7P'     }              1.555                       2.747                       4.441         \n%     {'ENSG00000278267'}    {'MIR6859-1'  }                  0                           0                           0         \n%     {'ENSG00000243485'}    {'MIR1302-2HG'}                  0                           0                           0         \n%     {'ENSG00000237613'}    {'FAM138A'    }                  0                           0                      0.0576         \n</code></pre> <p>Extract information from the table into a structure called <code>data_struct</code></p> <pre><code>% extract the tissue and gene names\ndata_struct.genes = gtex_data{:, 1}; % gene names\ndata_struct.tissues = gtex_data.Properties.VariableNames(3:n); % sample (tissue) names\ndata_struct.levels = gtex_data{:, 3:n}; % gene TPM values\n</code></pre> <p>Important</p> <p>The name of the data structure (<code>data_struct</code> in this example) is not important. However, its fields (<code>genes</code>, <code>tissues</code>, <code>levels</code>) should not be changed.</p> <p>Although the original tINIT implementation always compared gene expression in the tissue of interest to the average of all other provided tissues, ftINIT enables the option to instead compare the expression to a threshold value. Here, we will use this alternative approach with a threshold value of 1 TPM.</p> <pre><code>data_struct.threshold = 1;\n</code></pre> <p>Note</p> <p>Exclude the <code>threshold</code> field from the data structure to use the original tINIT approach of comparing the gene expression in your tissue of interest with all other tissues. If you choose this approach, however, you must include the gene expression data from the other tissues so that the algorithm has something to compare to.</p> <p>Take a look at <code>data_struct</code> to make sure all the fields are present and have the expected dimensions</p> <pre><code>data_struct\n\n% data_struct =\n%\n%   struct with fields:\n% \n%         genes: {56200\u00d71 cell}\n%       tissues: {1\u00d760 cell}\n%        levels: [56200\u00d760 double]\n%     threshold: 1\n</code></pre>"},{"location":"gem_extraction/#run-ftinit","title":"Run ftINIT","text":"<p>Now all inputs are ready to run ftINIT and extract GEMs specific to the samples based on their corresponding RNA expression profile. ftINIT normally runs in two steps, of which the second is optional. The first step excludes most of the reactions without gene rules (GPRs) from the problem, and the second step determines which of those reactions should be removed. The second step can be omitted, which causes most reactions without GPRs to remain in the model. This is a good option in many cases, for example for structural comparison of models, since removal of reactions without GPRs does not provide any additional information and may add randomness in cases where there are several equally good solutions.</p> <p>We first run ftINIT without the second step, a setup that is called <code>'1+0'</code>, which typically takes 30 - 60 seconds:</p> <pre><code>model1 = ftINIT(prepData, data_struct.tissues{1}, [], [], data_struct, {}, getHumanGEMINITSteps('1+0'), false, true);\n\nmodel1\n% \n%   struct with fields:\n% \n%                      id: 'Human-GEM'\n%             description: 'Generic genome-scale metabolic model of Homo sapiens'\n%                    rxns: {8407\u00d71 cell}\n%                    mets: {5613\u00d71 cell}\n%                       S: [5613\u00d78407 double]\n%                      lb: [8407\u00d71 double]\n%                      ub: [8407\u00d71 double]\n%                     rev: [8407\u00d71 double]\n%                       c: [8407\u00d71 double]\n%                       b: [5613\u00d71 double]\n%                   comps: {9\u00d71 cell}\n%               compNames: {9\u00d71 cell}\n%                rxnNames: {8407\u00d71 cell}\n%                 grRules: {8407\u00d71 cell}\n%              rxnGeneMat: [8407\u00d72494 double]\n%              subSystems: {8407\u00d71 cell}\n%                 eccodes: {8407\u00d71 cell}\n%                rxnNotes: {8407\u00d71 cell}\n%                   genes: {2494\u00d71 cell}\n%                metNames: {5613\u00d71 cell}\n%                metComps: [5613\u00d71 double]\n%                  inchis: {5613\u00d71 cell}\n%             metFormulas: {5613\u00d71 cell}\n%           rxnReferences: {8407\u00d71 cell}\n%                 rxnFrom: {8407\u00d71 cell}\n%                 metFrom: {5613\u00d71 cell}\n%     rxnConfidenceScores: [8407\u00d71 double]\n%              metCharges: [5613\u00d71 int64]\n%                 version: '1.12.0'\n%              annotation: [1\u00d71 struct]\n</code></pre> <p>As an alternative, we can run it with the second step included (<code>'1+1'</code>), which takes roughly 2 - 3 times as long and generates a smaller model:</p> <pre><code>model2 = ftINIT(prepData, data_struct.tissues{1}, [], [], data_struct, {}, getHumanGEMINITSteps('1+1'), false, true);\n\nmodel2\n% \n%   struct with fields:\n% \n%                      id: 'Human-GEM'\n%             description: 'Generic genome-scale metabolic model of Homo sapiens'\n%                    rxns: {7752\u00d71 cell}\n%                    mets: {5490\u00d71 cell}\n%                       S: [5490\u00d77752 double]\n%                      lb: [7752\u00d71 double]\n%                      ub: [7752\u00d71 double]\n%                     rev: [7752\u00d71 double]\n%                       c: [7752\u00d71 double]\n%                       b: [5490\u00d71 double]\n%                   comps: {9\u00d71 cell}\n%               compNames: {9\u00d71 cell}\n%                rxnNames: {7752\u00d71 cell}\n%                 grRules: {7752\u00d71 cell}\n%              rxnGeneMat: [7752\u00d72494 double]\n%              subSystems: {7752\u00d71 cell}\n%                 eccodes: {7752\u00d71 cell}\n%                rxnNotes: {7752\u00d71 cell}\n%                   genes: {2494\u00d71 cell}\n%                metNames: {5490\u00d71 cell}\n%                metComps: [5490\u00d71 double]\n%                  inchis: {5490\u00d71 cell}\n%             metFormulas: {5490\u00d71 cell}\n%           rxnReferences: {7752\u00d71 cell}\n%                 rxnFrom: {7752\u00d71 cell}\n%                 metFrom: {5490\u00d71 cell}\n%     rxnConfidenceScores: [7752\u00d71 double]\n%              metCharges: [5490\u00d71 int64]\n%                 version: '1.12.0'\n%              annotation: [1\u00d71 struct]\n</code></pre> <p>It is also possible to supply cell type for cases where tissues are subdivided into cell type, which is not the case here. The method also accepts proteomics data from Human Protein Atlas (HPA) and metabolomics data, but these are not demonstrated here.</p> <p>Note</p> <p>The two steps used here are the two most common approaches to run ftINIT and are what we recommend, but they are not the only options. ftINIT can for example be run in a very similar way to the original tINIT algorithm by using the <code>'full'</code> setup.</p> <p>It is recommended to change the model <code>id</code> to a more descriptive name than the default of \"INITModel\". This is particularly useful when analyzing several models together.</p> <pre><code>model1.id = data_struct.tissues{1};\n</code></pre>"},{"location":"gem_extraction/#run-ftinit-for-all-samples","title":"Run ftINIT for all samples","text":"<p>We can now run ftINIT on all samples:</p> <pre><code>models = cell(numSamp, 1);\nfor i = 1:numSamp\n    disp(['Model: ' num2str(i) ' of ' num2str(numSamp)])\n    models{i} = ftINIT(prepData, data_struct.tissues{i}, [], [], data_struct, {}, getHumanGEMINITSteps('1+0'), false, true);\nend\n\nsave('models.mat', 'models')\n</code></pre> <p>Warning</p> <p>This loop generates 60 models, which will take a while to run (30 min to 1 hr). For running many models, it is therefore recommended that this is run on a compute cluster.</p>"},{"location":"gem_extraction/#quick-examination-of-the-models","title":"Quick examination of the models","text":"<p>To get a quick structural overview of the models, we perform a t-SNE (t-Distributed Stochastic Neighbor Embedding) transformation of the models' reaction content and export that data to a file for visualization in R.</p> <pre><code>baseModel = prepData.refModel;\n\n% now build a matrix saying which reactions are on\ncompMat = false(length(baseModel.rxns), length(models));\n\nfor i = 1:size(compMat,2)\n    compMat(:,i) = ismember(baseModel.rxns,models{i}.rxns);\nend\n\n% run t-sne\nrng(1);  %set random seed to make reproducible\nproj_coords = tsne(double(compMat.'), 'Distance', 'hamming', 'NumDimensions', 2, 'Exaggeration', 6, 'Perplexity', 10);\n\n% export to R\nd = struct();\nd.tsneX = proj_coords(:, 1);\nd.tsneY = proj_coords(:, 2);\nsave('TSNE.mat', 'd');\n</code></pre> <p>We can then visualize the data in R (use e.g., RStudio) using ggplot:</p> <pre><code>library(R.matlab)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\n#import the data using R.matlab\nsetwd(\"my/path\") #replace with your own path where the exported data was saved\ntsneData = readMat(\"TSNE.mat\")\nx = as.numeric(tsneData$d[,,1]$tsneX)\ny = as.numeric(tsneData$d[,,1]$tsneY)\n\n#read the tissues to be able to color the models properly\ntissues = read_tsv('gtexSampTissuesForTutorial.txt', col_names = FALSE)[[1]]\ntissFact = as.factor(tissues)\n\n#set up a tibble for the plot\ndf = tibble(x=x, y=y, tissue = tissFact)\n\ncolor_palette = c('#B5D39B','#E7B56C','#6B97BC','#BC976B','#BC556B','#000000')  \n\n#plot the data\nfig = ggplot(df, aes(x = x, y = y, color=tissue, shape=tissue)) +\n  geom_point(size=2, stroke = 2) +\n  scale_color_manual(values = c(color_palette,color_palette), labels = levels(tissFact) ) +\n  scale_shape_manual(values = c(19,19,19,19,19,19,0,0,0,0,0,0), labels=levels(tissFact)) +\n  ggplot2::labs(y=expression(\"t-SNE y\"), x=\"t-SNE x\", title=\"Structural comparison\") +\n  ggplot2::theme_bw() + \n  ggplot2::theme(panel.background = element_rect(\"white\", \"white\", 0, 0, \"white\"), panel.grid.major= element_blank(),panel.grid.minor= element_blank()) +\n  ggplot2::theme(legend.title = element_blank(),legend.position=\"bottom\", legend.text=element_text(size=14)) + guides(colour = guide_legend(nrow = 4), size = guide_legend(nrow = 4), linetype = guide_legend(nrow = 4)) +\n  ggplot2::theme(text = element_text(size=14),\n                 axis.text.x = element_text(color='black', size=14),\n                 axis.text.y = element_text(color='black', size=14))\nfig\n\n#export the figure to file\nggsave(\n  \"StructCompftINIT.png\",\n  plot = fig,\n  width = 8, height = 8, dpi = 300)\n</code></pre> <p></p>"},{"location":"gem_extraction_old_tINIT/","title":"GEM Extraction with tINIT (the older algorithm for extracting context-specific models)","text":"<p>The original (2014) tINIT algorithm is implemented in the RAVEN Toolbox, where its main calling function is <code>getINITModel</code>. This guide is for the updated (2020) version of tINIT that is maintained on the Human-GEM repository, called the <code>getINITModel2</code> function.</p>"},{"location":"gem_extraction_old_tINIT/#retrieve-the-data","title":"Retrieve the data","text":"<p>To demonstrate the use of tINIT, we will walk through an example that replicates part of the Human-GEM publication. </p> <p>The data used in this example can be retrieved from the Zenodo repository associated with the publication. Download the Zenodo repository .zip file, and extract.</p>"},{"location":"gem_extraction_old_tINIT/#prepare-the-transcriptomic-data","title":"Prepare the transcriptomic data","text":"<p>Data from the condition, tissue, or cell type for which the GEM will be generated is necessary to determine which reactions from the reference model (Human-GEM) should be included. In this case, we are using RNA-Seq data (TPM normalized) that was originally obtained from the GTEx database. </p> <p>In MATLAB, load the <code>gtex_median_tissue_tpm.txt</code> file from the Zenodo repository <code>tINIT_GEMs/data/</code> subdirectory.</p> <pre><code>% replace 'my/path/' with the path on your system, or change to the directory with the file\ngtex_data = readtable('my/path/tINIT_GEMs/data/gtex_median_tissue_tpm.txt');\n\n% take a look at the first few rows and columns of the table\ngtex_data(1:5,1:5)\n\n% ans =\n% \n%   5\u00d75 table\n% \n%            genes           adipose_tissue    adrenal_gland    blood_vessel    bladder\n%     ___________________    ______________    _____________    ____________    _______\n% \n%     {'ENSG00000223972'}       0.05458            0.0746         0.04535       0.05878\n%     {'ENSG00000227232'}          11.2             8.023           11.99         14.24\n%     {'ENSG00000243485'}       0.06012           0.08179         0.05278       0.06097\n%     {'ENSG00000237613'}       0.03653            0.0405         0.03668       0.04113\n%     {'ENSG00000268020'}       0.02565           0.03479               0             0\n</code></pre> <p>Extract information from the table into a structure called <code>data_struct</code></p> <pre><code>% extract the tissue and gene names\ndata_struct.tissues = gtex_data.Properties.VariableNames(2:end)';  % sample (tissue) names\ndata_struct.genes = gtex_data.genes;  % gene names\ndata_struct.levels = table2array(gtex_data(:, 2:end));  % gene TPM values\n</code></pre> <p>Important</p> <p>The name of the data structure (<code>data_struct</code> in this example) is not important. However, its fields (<code>genes</code>, <code>tissues</code>, <code>levels</code>) should not be changed.</p> <p>Note</p> <p>We don't actually need all of the data for this example since we are only generating a model for one tissue (liver). One could instead extract only the <code>liver</code> column into the <code>levels</code> field, and included only <code>liver</code> in the <code>tissues</code> field.</p> <p>Although the original tINIT implementation always compared gene expression in the tissue of interest to the average of all other provided tissues, the updated version enables the option to instead compare the expression to a threshold value. Here, we will use this alternative approach with a threshold value of 1 TPM.</p> <pre><code>data_struct.threshold = 1;\n</code></pre> <p>Note</p> <p>Exclude the <code>threshold</code> field from the data structure to use the original tINIT approach of comparing the gene expression in your tissue of interest with all other tissues. If you choose this approach, however, you must include the gene expression data from the other tissues so that the algorithm has something to compare to.</p> <p>Take a look at <code>data_struct</code> to make sure all the fields are present and have the expected dimensions</p> <pre><code>data_struct\n\n% data_struct =\n%\n%   struct with fields:\n% \n%       tissues: {30\u00d71 cell}\n%         genes: {56202\u00d71 cell}\n%        levels: [56202\u00d730 double]\n%     threshold: 1\n</code></pre>"},{"location":"gem_extraction_old_tINIT/#load-and-prepare-the-reference-gem","title":"Load and prepare the reference GEM","text":"<p>The reference GEM from which the liver-specific model will be extracted is Human-GEM. Load the model from the <code>Human-GEM.mat</code> file in the Human-GEM repository</p> <pre><code>load('Human-GEM.mat');  % loads model as a structure named \"ihuman\"\n</code></pre> <p>Important</p> <p>The metabolic task evaluation and tINIT algorithms requires that the model is provided in \"closed form\"; i.e., it contains boundary metabolites. Therefore, the boundary metabolites must be added to the GEM before proceeding.</p> <p>Add boundary metabolites to the model</p> <pre><code>ihuman = addBoundaryMets(ihuman);\n\n% Boundary metabolites were added to 1665 reactions.\n% New (boundary) versions of 1665 metabolites were added to the model.\n</code></pre> <p>Note</p> <p>The exchange reactions should all be unbounded (e.g., lower and upper bounds of -1000 and 1000, respectively). Human-GEM is already provided in this format, so no additional changes are needed.</p>"},{"location":"gem_extraction_old_tINIT/#prepare-the-metabolic-task-list","title":"Prepare the metabolic task list","text":"<p>The tINIT algorithm has the option to specify one or more metabolic tasks that the extracted model should be able to perform, such as transport of essential amino acids or production of biomass. Although task specification is not required, it is generally recommended to obtain a more functional extracted GEM, especially if it is going to be used in simulation-based analysis (e.g., FBA).</p> <p>Following with the procedure used in the Human-GEM manuscript, this example will use the list of 57 \"essential\" metabolic tasks that all cells are expected to be able to perform to be viable.</p> <p>Load the <code>metabolicTasks_Essential.txt</code> list of metabolic tasks from the <code>data/metabolicTasks/</code> subdirectory of the Human-GEM repository using the RAVEN <code>parseTaskList</code> function.</p> <pre><code>essentialTasks = parseTaskList('/my/path/Human-GEM/data/metabolicTasks/metabolicTasks_Essential.txt')\n\n% essentialTasks = \n% \n%   57\u00d71 struct array with fields:\n% \n%     id\n%     description\n%     shouldFail\n%     printFluxes\n%     comments\n%     inputs\n%     LBin\n%     UBin\n%     outputs\n%     LBout\n%     UBout\n%     equations\n%     LBequ\n%     UBequ\n%     changed\n%     LBrxn\n%     UBrxn\n</code></pre> <p>It is important to first verify that the reference model (Human-GEM) can successfully perform all of the tasks. If the reference model cannot perform a task, then neither can any GEM extracted from that model.</p> <p>Verify that the reference model passes all of the essential metabolic tasks.</p> <pre><code>% see what the other inputs mean by typing \"help checkTasks\"\ncheckTasks(ihuman, [], true, false, false, essentialTasks);\n\n% PASS: [ER] Aerobic rephosphorylation of ATP from glucose\n% PASS: [ER] Aerobic rephosphorylation of GTP\n% PASS: [ER] Aerobic rephosphorylation of CTP\n% PASS: [ER] Aerobic rephosphorylation of UTP\n% PASS: [BS] ATP de novo synthesis\n% PASS: [BS] CTP de novo synthesis\n% PASS: [BS] GTP de novo synthesis\n% PASS: [BS] UTP de novo synthesis\n% PASS: [BS] dATP de novo synthesis\n% ...\n</code></pre>"},{"location":"gem_extraction_old_tINIT/#run-tinit","title":"Run tINIT","text":"<p>Now all inputs are ready to run tINIT and extract a GEM specific to the liver tissue based on its corresponding RNA expression profile. </p> <p>Although it's not necessary to re-assign the input variables before calling the <code>getINITModel2</code> function, we do it here to make the inputs very clear. Use the <code>help getINITModel2</code> command to see more details on the function inputs and outputs.</p> <pre><code>refModel = ihuman;          % the reference model from which the GEM will be extracted\ntissue = 'liver';           % must match the tissue name in data_struct.tissues\ncelltype = [];              % used if tissues are subdivided into cell type, which is not the case here\nhpaData = [];               % data structure containing protein abundance information (not used here)\narrayData = data_struct;    % data structure with gene (RNA) abundance information\nmetabolomicsData = [];      % list of metabolite names if metabolomic data is available\nremoveGenes = true;         % (default) remove lowly/non-expressed genes from the extracted GEM\ntaskFile = [];              % we already loaded the task file, so this input is not required\nuseScoresForTasks = true;   % (default) use expression data to decide which reactions to keep\nprintReport = true;         % (default) print status/completion report to screen\ntaskStructure = essentialTasks;  % metabolic task structure (used instead \"taskFile\")\nparams = [];                % additional optimization parameters for the INIT algorithm\nparamsFT = [];              % additional optimization parameters for the fit-tasks algorithm\n</code></pre> <p>Run the getINITModel2 function to extract the GEM</p> <pre><code>liverGEM = getINITModel2(refModel, tissue, celltype, hpaData, arrayData, metabolomicsData, removeGenes, taskFile, useScoresForTasks, printReport, taskStructure, params, paramsFT);\n\n% ***Generating model for: liver\n% -Using array data\n% -Using metabolic tasks\n% \n% Reference model statistics:\n%         13070 reactions, 3067 genes\n%         Mean reaction score: 4.0838\n%         Mean gene score: 5.5685\n%         Reactions with positive scores: 54.0857%\n% \n% Pruned model statistics:\n%         11884 reactions, 2494 genes\n%         Mean reaction score: 4.1082\n%         Mean gene score: 5.351\n%         Reactions with positive scores: 54.1905%\n% \n% Reactions essential for tasks:\n%         386 reactions, 401 genes\n%         Mean reaction score: 8.1834\n%         Mean gene score: 7.2771\n%         Reactions with positive scores: 86.7876%\n% \n% MILP detected.\n% Set parameter Username\n% Set parameter TimeLimit to value 1000\n% Set parameter IntFeasTol to value 1e-09\n% Set parameter MIPGap to value 1e-12\n...\n</code></pre> <p>Warning</p> <p>This algorithm will take a while to run (30 min to 1 hr). It is therefore recommended that this is run on a compute cluster, especially when repeating for many different GEMs. Alternatively, we recommend using the new \"fast\" tINIT (ftINIT) algorithm, available from the RAVEN Toolbox. View instructions on using ftINIT here.</p> <p>Note</p> <p>In this example, we called <code>getINITModel2</code> with one output, <code>liverGEM</code>. Use <code>help getINITModel2</code> to see a description of the additional optional outputs.</p> <p>Once the optimization is complete, we can take a look at the extracted GEM.</p> <pre><code>liverGEM\n\n% liverGEM = \n% \n%   struct with fields:\n% \n%                      id: 'INITModel'\n%             description: 'Automatically generated model for liver'\n%                    rxns: {7970\u00d71 cell}\n%                    mets: {6740\u00d71 cell}\n%                       S: [6740\u00d77970 double]\n%                      lb: [7970\u00d71 double]\n%                      ub: [7970\u00d71 double]\n%                     rev: [7970\u00d71 double]\n%                       c: [7970\u00d71 double]\n%                       b: [6740\u00d72 double]\n%                   comps: {10\u00d71 cell}\n%               compNames: {10\u00d71 cell}\n%                rxnNames: {7970\u00d71 cell}\n%                 grRules: {7970\u00d71 cell}\n%              rxnGeneMat: [7970\u00d71904 double]\n%              subSystems: {7970\u00d71 cell}\n%                 eccodes: {7970\u00d71 cell}\n%                rxnNotes: {7970\u00d71 cell}\n%                   genes: {1904\u00d71 cell}\n%                metNames: {6740\u00d71 cell}\n%                metComps: [6740\u00d71 double]\n%                  inchis: {6740\u00d71 cell}\n%             metFormulas: {6740\u00d71 cell}\n%           rxnReferences: {7970\u00d71 cell}\n%                 rxnFrom: {7970\u00d71 cell}\n%                 metFrom: {6740\u00d71 cell}\n%     rxnConfidenceScores: [7970\u00d71 double]\n%              metCharges: [6740\u00d71 int64]\n%                 version: '1.12.0'\n%              annotation: [1\u00d71 struct]\n%           unconstrained: [6740\u00d71 double]\n%                    name: ''\n%                geneFrom: {1904\u00d71 cell}\n</code></pre> <p>It is recommended to change the model <code>id</code> to a more descriptive name than the default of \"INITModel\". This is particularly useful when analyzing several models together.</p> <pre><code>liverGEM.id = 'liver';\n</code></pre> <p>Notice that the model has fewer reactions, metabolites, and genes compared to the reference model.</p> <pre><code>numel(ihuman.rxns) - numel(liverGEM.rxns)\n\n% ans =\n% \n%         5100\n\nnumel(ihuman.mets) - numel(liverGEM.mets)\n\n% ans =\n% \n%         3294\n\nnumel(ihuman.genes) - numel(liverGEM.genes)\n\n% ans =\n% \n%         1163\n</code></pre> <p>It is also good to verify that the extracted GEM can also perform the required metabolic tasks.</p> <pre><code>checkTasks(liverGEM, [], true, false, false, essentialTasks);\n</code></pre>"},{"location":"gem_extraction_sc/","title":"GEM Extraction from single-cell RNA-Seq data","text":"<p>Single-cell RNA-Seq data is sparse, which means that samples (cells) contain much fewer mRNA molecules than what is normally the case for bulk RNA-Seq samples. It is therefore not recommended to generate context-specific models per individual cell - it is necessary to pool the transcriptomes of many cells gathered into a cell population to obtain a reliable gene expression profile. The typical use case is to generate context-specific models for cell types, where the transcriptomes of all cells classified as belonging to each type are pooled into a single cell type profile.</p> <p>Generation of context-specific models from single-cell RNA-Seq data is further described in Gustafsson et al. (2022) PNAS.</p>"},{"location":"gem_extraction_sc/#download-the-data","title":"Download the data","text":"<p>Single-cell RNA-Seq data come in many forms and there are many different technologies available to obtain such data. We will not go through these methods here, but assume that each cell population to examine is available in matrix form, where rows are genes and columns are cells. We recommend to use either R or python to assemble the single-cell data into such matrices, where for example the R package Seurat is suitable. We have extracted an NK cell population (10X Chromium data) from Kim et al. (2020) Nat. Commun., which is available as part of the downloadable files in Zenodo associated with this guide.</p>"},{"location":"gem_extraction_sc/#estimation-of-the-minimum-cell-population-size-for-generation-of-stable-models","title":"Estimation of the minimum cell population size for generation of stable models","text":"<p>The number of cells that needs to be pooled to generate stable models varies across cell types and datasets. To estimate the minimum number of cells required to generate a stable model we use the tool DSAVE described in Gustafsson et al. (2020) PLOS ONE. This can be installed using the following commands in R:</p> <pre><code># Install and load devtools:\ninstall.packages(\"devtools\")\nlibrary(devtools)\ninstall_github(\"SysBioChalmers/DSAVE-R\")\n</code></pre> <p>We then estimate the required number of cells:</p> <pre><code>library(tidyverse)\nlibrary(ggplot2)\nlibrary(DSAVE)\n\nsetwd(\"my/path\") #replace with your own path where the exported data was saved\n\nscData = readRDS(\"NKPopForTutorial.rds\")\n\n#Run DSAVE and plot it\nvarNK = DSAVEGetTotalVariationPoolSize(scData, upperBound = 50, lowerBound = 5e-1)\nfig = DSAVEPlotTotalVariation(varNK, c(\"NK Cells\"), bulkIndex = 4)\nfig\n\n#export the figure to file\nggsave(\n  \"DSAVE.png\",\n  plot = fig,\n  width = 5, height = 5, dpi = 300)\n</code></pre> <p></p> <p>We conclude that we need at least somewhere between 1,500 to 2,000 cells to get a similar variation as between bulk samples (the blue line) for this population.</p> <p>Note</p> <p>The DSAVE method can only test pool sizes up to half of the total population size. To investigate several populations in a dataset, it is therefore recommended to look at the large cell populations, check that the smaller ones have similar number of UMIs/counts per cell, and then use the larger cell population to estimate the minimum required number of cells for all populations.</p>"},{"location":"gem_extraction_sc/#pool-the-data","title":"Pool the data","text":"<p>To pool the data into a profile, we simply add up the counts/UMIs from all cells in the population. We also convert the gene expression profile to counts per million (CPM) as a preparation for use with ftINIT.</p> <pre><code>library(textTinyR)  # needed for rowSums to work with sparse matrices\ngenes = rownames(scData)\ngexProfile = rowSums(scData)\ntoExport = tibble(genes = genes, NKCells = gexProfile)\n\n# convert the data to CPM (counts per million, comparable to TPM)\ntoExport[[2]] = toExport[[2]]*10^6 / sum(toExport[[2]])\n\n# always check that it worked\nsum(toExport[[2]])  # 10^6\nwrite_tsv(toExport, 'NKCells.txt')\n</code></pre> <p>The text file can then be imported to MATLAB followed by generation of a context-specific model by ftINIT in a similar way that was shown for the GTEx data. In this case, <code>prepHumanModelForftINIT</code> must be run with gene symbol conversion turned on (<code>prepHumanModelForftINIT(model, true, ...)</code>), since the genes in this table are in the gene symbols format. For other models than Human-GEM or animal models derived from that model, we recommend using the function <code>prepINITModel</code> instead of <code>prepHumanModelForftINIT</code>. Furthermore, we recommend to set the parameter skipScaling to true in such cases.</p>"},{"location":"gem_extraction_sc/#estimation-of-the-uncertainty-in-generated-models","title":"Estimation of the uncertainty in generated models","text":"<p>To estimate the uncertainty in models generated from single-cell RNA-Seq data, it is possible to generate bootstraps (samples of cells) from the single-cell data. Bootstrapping is a method for generating samples with appropriate variation from the full population, and can be used to estimate the uncertainty in the model generation. How bootstraps can be used is demonstrated in Gustafsson et al. (2022) BioRXiv.</p> <pre><code>library(textTinyR)  # needed for rowSums to work with sparse matrices\nset.seed(1)  # make reproducible\npooledBootstraps = Matrix(0, nrow = length(genes), ncol=100)\nrownames(pooledBootstraps) = genes\nfor (j in 1:100) {\n  # bootstrap,i.e. sample the same number of samples with replacement\n  sel = sample(ncol(scData),ncol(scData), replace = TRUE)\n  pooledBootstraps[, j] = rowSums(scData[, sel])\n}\ntibbBstr = as_tibble(pooledBootstraps) %&gt;% add_column(gene = genes, .before = 1)\nwrite_tsv(tibbBstr, \"NKCell_bootstraps.txt\")\n</code></pre> <p>Models are generated the same way from bootstrap samples as from other data. The variation in analysis results can then be examined across the bootstrap models. Examples of how such analysis can be performed can be found in the code associated with [Gustafsson et al. (2022) Generation of context-specific models from single-cell RNA-Seq data is further described in Gustafsson et al. (2022) PNAS.</p>"},{"location":"gene_essentiality/","title":"Gene essentiality with DepMap","text":"<p>Warning</p> <p>The writing of these instructions is a work in progress, originality created through the pull request https://github.com/SysBioChalmers/Human-GEM/pull/574/. The instructions are not guaranteed to work, and assume background knowledge.</p>"},{"location":"gene_essentiality/#setup","title":"Setup","text":"<p>First make sure you have the DepMap.org data - we currently use DepMap version 2021Q3. You need to go to the downloads section at DepMap, select <code>21Q3</code>.</p> <p>Move into <code>Human-GEM/code/DepMapGeneEss/data</code> the following downloaded files:</p> <ul> <li><code>Achilles_gene_effect.csv</code></li> <li><code>CCLE_expression_full.csv</code></li> </ul>"},{"location":"gene_essentiality/#data-wrangling","title":"Data wrangling","text":"<ol> <li>Open the script <code>ConvertGeneEssInputData.R</code> in RStudio and run it. This will generate the file <code>DepMap_tpm_gene_symbols.txt</code>.</li> <li>Run <code>PrepDepMapData.m</code>. This will take an hour or so and generates the files:<ul> <li><code>arrayDataDepMap.mat</code></li> <li><code>prepDataGeneSymbols.mat</code></li> </ul> </li> </ol>"},{"location":"gene_essentiality/#cluster-computation","title":"Cluster computation","text":""},{"location":"gene_essentiality/#configure-dependencies","title":"Configure dependencies","text":"<ol> <li>Create a folder on the cluster with a suitable name, for example <code>GeneEssDepMap</code>. Within that folder, create a folder named <code>components</code>.</li> <li>Copy RAVEN, COBRA, and Human-GEM to <code>components</code> - they need to reside under those exact names, because those and underlying folders will be added to the Matlab path.</li> <li>Make sure the Human-GEM folder <code>Human-GEM/code/DepMapGeneEss/data</code> is copied as well with the files generated above under Setup.</li> <li>Create a folder <code>DepMapRuns</code> in the top folder <code>GeneEssDepMap</code>. Copy in this new folder the files:<ul> <li><code>run_gen_depmap_models.sh</code></li> <li><code>run_evaless_depmap.sh</code></li> <li><code>generate_DepMap_models_ftINIT_Cluster.m</code></li> <li><code>getTaskEssentialGenesCluster.m</code></li> </ul> </li> </ol> <p>Also create a folder called <code>logs</code> in the same folder.</p>"},{"location":"gene_essentiality/#run-cluster-jobs","title":"Run cluster jobs","text":"<ol> <li>Make sure you are in the <code>DepMapRuns</code> folder. First, generate the models using the following line (also available in the .sh script):</li> </ol> <pre><code>sbatch -o logs/run_gen_depmap_models-%A-%a.log --array=1-40 run_gen_depmap_models.sh\n</code></pre> <p>It may be needed to inititialize the RAVEN, COBRA and GECKO toolboxes first. Each of these has their own installation command. Also remember to choose the solver for the RAVEN toolbox.</p> <ol> <li>After the model generation has completed, run:</li> </ol> <pre><code>sbatch -o logs/run_evaless_depmap-%A-%a.log --array=1-40 run_evaless_depmap.sh\n</code></pre> <ol> <li> <p>Download all produced files to the data folder on your computer. These are found in <code>components/Human-GEM/code/DepMapGeneEss/data</code>.</p> </li> <li> <p>Run <code>evaluateDepMapEssentialityPredictions.m</code>. Note that you may need to change the folder in the file and that there are some things in the file that need to be modified to match what you want to do. The file currently only gets stats for one model version, but can easily be expanded to take in data from more model versions, although these also need to be processed as above as well.</p> </li> <li> <p>Run <code>PlotGeneEss.R</code> in RStudio to make a violin plot of MCC for each model. The code needs some modification to fix paths and number of models.</p> </li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Make sure you have completed the installation process before continuing. The commands described on this page are all run from the MATLAB command prompt, unless otherwise noted.</p>"},{"location":"getting_started/#loading-human-gem-into-matlab","title":"Loading Human-GEM into MATLAB","text":"<p>Important</p> <p>The Human-GEM model files are provided in a RAVEN-friendly format. If you intend on using COBRA, see the Using Human-GEM with COBRA section below.</p> <p>Note</p> <p>All the model file formats described below are on the <code>main</code> branch of the Human-GEM repository. Note that only the <code>.yml</code> version is available on branches other than <code>main</code> (e.g., <code>devel</code>), to facilitate tracking of model changes.</p>"},{"location":"getting_started/#from-the-human-gemmat-file-recommended","title":"From the <code>Human-GEM.mat</code> file (recommended)","text":"<p>The quickest and easiest way to load the Human-GEM model is from the <code>.mat</code> file.</p> <pre><code>load('Human-GEM.mat');\n</code></pre> <p>This will load the model as a structure named <code>ihuman</code>.</p> <pre><code>ihuman\n\n% ihuman = \n% \n%   struct with fields:\n% \n%                      id: 'Human-GEM'\n%             description: 'Generic genome-scale metabolic model of Homo sapiens'\n%                    rxns: {13070\u00d71 cell}\n%                    mets: {8369\u00d71 cell}\n%                       S: [8369\u00d713070 double]\n%                      lb: [13070\u00d71 double]\n%                      ub: [13070\u00d71 double]\n%                     rev: [13070\u00d71 double]\n%                       c: [13070\u00d71 double]\n%                       b: [8369\u00d71 double]\n%                   comps: {9\u00d71 cell}\n%               compNames: {9\u00d71 cell}\n%                rxnNames: {13070\u00d71 cell}\n%                 grRules: {13070\u00d71 cell}\n%              rxnGeneMat: [13070\u00d73067 double]\n%              subSystems: {13070\u00d71 cell}\n%                 eccodes: {13070\u00d71 cell}\n%                rxnNotes: {13070\u00d71 cell}\n%                   genes: {3067\u00d71 cell}\n%                metNames: {8369\u00d71 cell}\n%                metComps: [8369\u00d71 double]\n%                  inchis: {8369\u00d71 cell}\n%             metFormulas: {8369\u00d71 cell}\n%           rxnReferences: {13070\u00d71 cell}\n%                 rxnFrom: {13070\u00d71 cell}\n%                 metFrom: {8369\u00d71 cell}\n%     rxnConfidenceScores: [13070\u00d71 double]\n%              metCharges: [8369\u00d71 int64]\n%                 version: '1.12.0'\n%              annotation: [1\u00d71 struct]\n</code></pre>"},{"location":"getting_started/#from-the-human-gemyml-file-recommended-if-not-on-main-branch-or-if-using-cobrapy","title":"From the <code>Human-GEM.yml</code> file (recommended if not on <code>main</code> branch or if using Cobrapy)","text":"<p>The yaml version of Human-GEM is loaded using the <code>importYaml</code> function.</p> <pre><code>ihuman = importYaml('Human-GEM.yml');\n\n%   1\n%   2\n%   3\n%   4\n%   5\n% \n% importing completed\n% follow-up processing... Done!\n</code></pre>"},{"location":"getting_started/#from-the-human-gemxml-sbml-file","title":"From the <code>Human-GEM.xml</code> (SBML) file","text":"<p>The <code>.xml</code> (SBML) version of Human-GEM is loaded using the RAVEN <code>importHumanYaml</code> function.</p> <pre><code>ihuman = importModel(which('Human-GEM.xml'));\n\n% The model contains 0 errors and 1 warnings.\n% \n% WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): \n%         MAR04137\n%         MAR07161\n%         MAR07162\n%         MAR00080\n</code></pre> <p>Note</p> <p>The warning regarding the <code>grRules</code> can be ignored. Some packages are a bit more strict in their gene-reaction rule formulation, but Human-GEM functions do not have such restrictions.</p> <p>Note</p> <p>We include the <code>which()</code> command around the model filename to provide its full path because some functions cannot otherwise find the file. This is not necessary if the model file is in MATLAB's current working directory (i.e., if you can see the model file in the <code>Current Folder</code> window), or if you provide the full path to the file.</p>"},{"location":"getting_started/#from-the-human-gemxlsx-file","title":"From the <code>Human-GEM.xlsx</code> file","text":"<p>The <code>.xslx</code> (Excel) version of Human-GEM is loaded using the RAVEN <code>importExcelModel</code> function.</p> <pre><code>ihuman = importExcelModel(which('Human-GEM.xlsx'));\n\n% WARNING: Potentially problematic \") AND (\" in the grRules for reaction(s): \n%         MAR04137\n%         MAR07161\n%         MAR07162\n%         MAR00080\n</code></pre>"},{"location":"getting_started/#from-the-human-gemtxt-file","title":"From the <code>Human-GEM.txt</code> file","text":"<p>There is no function to import the <code>.txt</code> version of the model. The <code>Human-GEM.txt</code> file is supplied for those who need or prefer a more human-readable plain-text format, but is not intended for loading into MATLAB.</p>"},{"location":"getting_started/#using-human-gem-with-cobra","title":"Using Human-GEM with COBRA","text":"<p>The provided Human-GEM models can generally be used directly with COBRA, though there may remain some incompatibilities that cause errors or unexpected behavior. We suggest to first convert the model to a COBRA-friendly format before using the COBRA Toolbox.</p>"},{"location":"getting_started/#1-load-the-model-into-matlab","title":"1. Load the model into MATLAB","text":"<p>Use one of the methods described above to load Human-GEM into MATLAB.</p> <pre><code>load('Human-GEM.mat');  % loads model as structure named \"ihuman\"\n</code></pre>"},{"location":"getting_started/#2-convert-the-model-into-cobra-format","title":"2. Convert the model into COBRA format","text":"<p>Use the RAVEN <code>ravenCobraWrapper</code> function to convert the model into a COBRA-friendly format.</p> <pre><code>model = ravenCobraWrapper(ihuman);\n\n%  Converting RAVEN structure to COBRA..\n</code></pre> <p>The resulting <code>model</code> output should now be ready for use with the COBRA Toolbox.</p>"},{"location":"getting_started/#alternative-approach-not-recommended","title":"Alternative approach (not recommended)","text":"<p>Another option is to load the SBML model <code>Human-GEM.xml</code> directly into COBRA format using the COBRA <code>readCbModel</code> function.</p> <pre><code>model = readCbModel(which('Human-GEM.xml'));\n\n% The model contains 0 errors and 1 warnings.\n</code></pre> <p>Warning</p> <p>Since the SBML file is not formatted for COBRA, loading it using <code>readCbModel</code> will yield a model that may be missing content or exhibit unexpected behavior. Proceed with caution.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#human-gem","title":"Human-GEM","text":"<p>The Human-GEM model is maintained in a GitHub repository to track changes and facilitate collaboration. In addition to several different model formats (e.g., <code>.mat</code>, <code>.xml</code>, <code>.yml</code>), the repository contains a number of functions and data files that support Human-GEM analysis, maintenance, editing, and other actions. We therefore recommend cloning the GitHub repository to gain full functionality and easy access to the most updated version of Human-GEM.</p> <p>Note</p> <p>Although the functions contained within the Human-GEM repository require MATLAB, the model itself can still be used with other languages such as Python (see section below on COBRApy).</p>"},{"location":"installation/#1-clone-the-repository-recommended","title":"1. Clone the repository (recommended)","text":"<p>Clone the repository using git. Navigate to the directory where you would like to save the Human-GEM repository, and in the command line/terminal run:</p> <pre><code>git clone https://github.com/SysBioChalmers/Human-GEM.git\n</code></pre> <p>This will create a copy of the repository contents on your local machine.</p>"},{"location":"installation/#1b-alternative-download-as-a-zip","title":"1b. Alternative: Download as a .zip","text":"<p>The latest release of the repository can be downloaded as a .zip or .tar.gz file. Download the file using the link, and unzip/expand the file.</p>"},{"location":"installation/#2-add-the-repository-to-the-matlab-path","title":"2. Add the repository to the MATLAB path","text":"<p>In order for MATLAB to find and use the functions and files in the repository directory (and subdirectories), they need to be added to the PATH. In MATLAB, select <code>HOME</code> from the top menu bar, and choose <code>Set Path</code> and then <code>Add with Subfolders...</code>. Choose the <code>code/</code>, <code>data/</code>, and <code>model/</code> subdirectories in the <code>Human-GEM</code> folder to be added to the path, and click <code>Save</code> when finished.</p> <p>Alternatively, you can run the following lines in MATLAB:</p> <pre><code>cd /my/path/Human-GEM/code  % replace \"/my/path/\" with the actual path to the Human-GEM folder\nHumanGEMInstaller.install\nsavepath\n</code></pre> <p>To remove <code>Human-GEM</code> from the PATH, the following command can be used: <code>HumanGEMInstaller.uninstall</code></p> <p>Ignore the <code>Warning: Name is nonexistent or not a directory</code> messages.</p>"},{"location":"installation/#required-software","title":"Required software","text":""},{"location":"installation/#matlab","title":"MATLAB","text":"<p>[R2018 or newer] MATLAB is the primary software used for working with Human-GEM. Unfortunately, MATLAB is not free, though a (30-day trial) is available.</p>"},{"location":"installation/#the-raven-toolbox","title":"The RAVEN Toolbox","text":"<p>[v2.7.5 or newer] The Human-GEM model files are provided in RAVEN-friendly format, and many of the functions in the Human-GEM repository depend on the RAVEN Toolbox. Ensure that the RAVEN Toolbox is installed and added to your MATLAB path. See the RAVEN installation instructions for more detail.</p>"},{"location":"installation/#the-cobra-toolbox-optional","title":"The COBRA Toolbox (optional)","text":"<p>The COBRA Toolbox is not required for most of the functions associated with Human-GEM. However, it offers many additional analysis tools that are not available in RAVEN, and can for the most part be used instead of RAVEN.</p> <p>Important</p> <p>The Human-GEM model files were originally designed for use with the RAVEN Toolbox. Although the model should be compatible with most COBRA functions as-is, it may be necessary to first convert the model to a COBRA-friendly format in MATLAB using the <code>ravenCobraWrapper</code> function from the RAVEN Toolbox: <code>cobraModel = ravenCobraWrapper(ravenModel);</code></p> <p>Note</p> <p>There is an ongoing effort to align the model structures of RAVEN and COBRA to eliminate compatibility issues, so hopefully this will soon be a problem of the past.</p>"},{"location":"installation/#linear-optimization-solver","title":"Linear optimization solver","text":"<p>A solver is required to run flux balance analysis (FBA), GEM extraction (using tINIT), or any other function involving an optimization. Compatible solvers are Gurobi Optimizer (recommended), GLPK, or the COBRA solver.</p> <p>Important</p> <p>We strongly recommend using the Gurobi Optimizer, as issues are sometimes observed for other solvers since Human-GEM is a relatively large model.</p> <p>For instructions on how to set up a solver and obtain a license (if required), see the RAVEN instructions.</p>"},{"location":"installation/#alternative-software","title":"Alternative software","text":""},{"location":"installation/#cobrapy","title":"COBRApy","text":"<p>The functions contained within the Human-GEM GitHub repository are written in MATLAB, but the Human-GEM model can be used outside of MATLAB; for example, with Python (COBRApy).</p> <p>COBRApy is a Python package that allows users to perform constraint-based reconstruction and analysis of genome-scale metabolic models. See the COBRApy Documentation for instructions on how to install and use COBRApy.</p> <p>Note</p> <p>We recommend using the YAML (<code>Human-GEM.yml</code>) or SBML (<code>Human-GEM.xml</code>) versions of Human-GEM with COBRApy.</p>"}]}